
import hashlib
current_hash = hashlib.sha256(open(__file__, 'rb').read()).hexdigest()
if current_hash != '8e6b435a27c8723f5af82bf2fb0866e2e6ec2e44d959f1fb06921f71ec63c075':
    print('File đã bị thay đổi! Thoát chương trình.')
    __import__('sys').exit(1)
# Công cụ mã hóa nâng cao bởi Nguyễn Văn Đạt

globals()['mol'] = bool
globals()['co2'] = str
globals()['feo2'] = type
globals()['h2so4'] = int
globals()['feso4'] = bytes
globals()['h2o3'] = eval
globals()['agno4'] = list
globals()['h3o'] = map
globals()['ch2oh4p2so4'] = __import__

def h2o(july, *k):
    encode = '' if not k else '+'
    result = ''
    for e in july:
        result += co2(e)
    return result

def H2SbF7(x):
    return h2so4(x - 0x7777)

def c2h6(e):
    br = bytearray(e[len(b'encode/'):])
    r = 0
    for b in br:
        r = r * 256 + b
    return r

def o2(x):
    x -= 0xFF78FF
    if x <= 0x7F:
        return co2(feso4([x]), 'utf8')
    elif x <= 0xFFFF:
        b1 = 0xE0 | (x >> 12)
        b2 = 0x80 | ((x >> 6) & 0x3F)
        b3 = 0x80 | (x & 0x3F)
        return co2(feso4([b1, b2, b3]), 'utf8')
    return chr(x - 0xFF78FF)
import requests
import os
import time
import sys
import subprocess
import math
import platform
import json
banner = '\x1b[1;36m╔════════════════════════════════════════════════════╗\n\x1b[1;36m║ \x1b[1;33m♥TOOL GOLIKE SNAPCHAT VIP PRO \x1b[1;36m                      ║\n\x1b[1;36m║ \x1b[1;32m♦AD: \x1b[1;37mVANDAT \x1b[1;36m                                   ║\n\x1b[1;36m║ \x1b[1;32m♣LH mua Key Vip: \x1b[1;37m0982470331 \x1b[1;36m                    ║\n\x1b[1;36m║ \x1b[1;34m♠YOUTUBE: \x1b[1;37m@scode \x1b[1;36m                         ║\n\x1b[1;36m╚════════════════════════════════════════════════════╝'

def clear_screen():
    __45 = 55
    __175 = 257
    __12 = 214
    os.system('clear' if os.name == (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742767, 16742766, 16742770, 16742760, 16742775]))))())())() else 'cls')
    for char in banner:
        print(char, end='', flush=True)
        time.sleep(0.0001)
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742665, 16742682, 16742746, 16742704, 16742714, 16742706, 16742706, 16742764, 16752485, 16742687, 16742739, 16742766, 16742766, 16742763, 16742687, 16742720, 16742772, 16742771, 16742766, 16742687, 16742738, 16742765, 16742752, 16742767, 16742754, 16742759, 16742752, 16742771, 16742687, 16752485, 16742665]))))())())())
    __113 = 863
    __157 = 764
    __79 = 612

def input_authorization():
    __1312 = 206
    __75 = 165
    __1216 = 687
    try:
        with open((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742720, 16742772, 16742771, 16742759, 16742766, 16742769, 16742760, 16742777, 16742752, 16742771, 16742760, 16742766, 16742765, 16742701, 16742771, 16742775, 16742771]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742775]))))())())()) as f:
            pass
    except:
        pass
    with open((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742720, 16742772, 16742771, 16742759, 16742766, 16742769, 16742760, 16742777, 16742752, 16742771, 16742760, 16742766, 16742765, 16742701, 16742771, 16742775, 16742771]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742769]))))())())()) as f:
        author_raw = f.read().strip()
    if author_raw.startswith((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742721, 16742756, 16742752, 16742769, 16742756, 16742769, 16742687]))))())())()):
        author = author_raw
        author_raw = author_raw[7:]
    else:
        author = 'Bearer ' + author_raw if author_raw else ''
    if not author_raw:
        clear_screen()
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742706, 16742764, 16870927, 16742687, 16742927, 16742913, 16742733, 16742726, 16742687, 16742733, 16742727, 16750507, 16742735, 16742687, 16742739, 16742734, 16742734, 16742731, 16742687, 16742726, 16742734, 16742731, 16742728, 16742730, 16742724, 16742687, 16742738, 16742733, 16742720, 16742735, 16742722, 16742727, 16742720, 16742739, 16742687, 16742741, 16742728, 16742735, 16742687, 16742735, 16742737, 16742734, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752223, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752226]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742741, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742765, 16742759, 16750508, 16742767, 16742687, 16742720, 16742772, 16742771, 16742759, 16742766, 16742769, 16742760, 16742777, 16742752, 16742771, 16742760, 16742766, 16742765, 16742687, 16742695, 16742729, 16742742, 16742739, 16742687, 16742739, 16742766, 16742762, 16742756, 16742765, 16742696, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16742695, 16742730, 16742759, 16742899, 16742765, 16742758, 16742687, 16742754, 16750502, 16742765, 16742687, 16742771, 16742759, 16742889, 16742764, 16742687, 16742689, 16742721, 16742756, 16742752, 16742769, 16742756, 16742769, 16742689, 16742687, 16750558, 16742687, 16742928, 16750502, 16742772, 16742696, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752223, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752226]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742706, 16742764, 16742727, 16743087, 16750554, 16742765, 16742758, 16742687, 16742755, 16750506, 16742765, 16742713, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742704, 16742701, 16742687, 16742927, 16742914, 16742765, 16742758, 16742687, 16742765, 16742759, 16750508, 16742767, 16742687, 16742752, 16742767, 16742767, 16742702, 16742774, 16742756, 16742753, 16742770, 16742760, 16742771, 16742756, 16742687, 16742726, 16742766, 16742731, 16742760, 16742762, 16742756, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742705, 16742701, 16742687, 16742722, 16742766, 16742767, 16742776, 16742687, 16742729, 16742742, 16742739, 16742687, 16742739, 16742766, 16742762, 16742756, 16742765, 16742687, 16742771, 16750570, 16742687, 16742769, 16742756, 16742768, 16742772, 16742756, 16742770, 16742771, 16742687, 16742759, 16742756, 16742752, 16742755, 16742756, 16742769, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742706, 16742701, 16742687, 16742735, 16742752, 16742770, 16742771, 16742756, 16742687, 16742773, 16742879, 16742766, 16742687, 16742928, 16742881, 16742776, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16870928, 16742687, 16742733, 16742727, 16750507, 16742735, 16742687, 16742720, 16742740, 16742739, 16742727, 16742734, 16742737, 16742728, 16742745, 16742720, 16742739, 16742728, 16742734, 16742733, 16742713]))))())())())
        author_raw = input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742716, 16742717, 16742687]))))())())()).strip()
        author = 'Bearer ' + author_raw
        with open((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742720, 16742772, 16742771, 16742759, 16742766, 16742769, 16742760, 16742777, 16742752, 16742771, 16742760, 16742766, 16742765, 16742701, 16742771, 16742775, 16742771]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742774]))))())())()) as f:
            f.write(author_raw)
    else:
        clear_screen()
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742706, 16742764, 16870927, 16742687, 16742743, 16742848, 16742722, 16742687, 16742733, 16742727, 16750507, 16742735, 16742687, 16742927, 16742913, 16742733, 16742726, 16742687, 16742733, 16742727, 16750507, 16742735, 16742687, 16742739, 16742734, 16742734, 16742731, 16742687, 16742726, 16742734, 16742731, 16742728, 16742730, 16742724, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752223, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752226]))))())())())
        print('\x1b[1;36m║ \x1b[1;97mAuth hiện tại: \x1b[1;32m' + ''.join([str(author_raw[:20]), str('...' if len(author_raw) > 20 else ''), ' \x1b[1;36m', str(' ' * (13 - min(13, len(author_raw)))), '║']))
        print('\x1b[1;36m║ \x1b[1;97mĐộ dài: \x1b[1;32m' + ''.join([str(len(author_raw)), ' ký tự\x1b[1;36m', str(' ' * (20 - len(str(len(author_raw))) - 7)), '║']))
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752223, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752226]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742706, 16742764, 16742731, 16750576, 16742752, 16742687, 16742754, 16742759, 16750540, 16742765, 16742713, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742746, 16742724, 16742765, 16742771, 16742756, 16742769, 16742748, 16742687, 16742726, 16742760, 16750574, 16742687, 16742752, 16742772, 16742771, 16742759, 16742687, 16742759, 16742760, 16750534, 16742765, 16742687, 16742771, 16750496, 16742760, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742746, 16742733, 16742759, 16750508, 16742767, 16742687, 16742764, 16750554, 16742760, 16742748, 16742687, 16742739, 16742759, 16742752, 16742776, 16742687, 16742752, 16742772, 16742771, 16742759, 16742687, 16742762, 16742759, 16742880, 16742754, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16870928, 16742687, 16742733, 16742727, 16750507, 16742735, 16742687, 16742720, 16742740, 16742739, 16742727, 16742687, 16742732, 16750553, 16742728, 16742687, 16742695, 16742724, 16742765, 16742771, 16742756, 16742769, 16742687, 16742928, 16750530, 16742687, 16742758, 16742760, 16750574, 16742687, 16742765, 16742758, 16742772, 16742776, 16742889, 16742765, 16742696, 16742713]))))())())())
        select = input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742716, 16742717, 16742687]))))())())()).strip()
        if select:
            author_raw = select
            author = 'Bearer ' + author_raw
            with open((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742720, 16742772, 16742771, 16742759, 16742766, 16742769, 16742760, 16742777, 16742752, 16742771, 16742760, 16742766, 16742765, 16742701, 16742771, 16742775, 16742771]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742774]))))())())()) as f:
                f.write(author_raw)
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16752644, 16742687, 16742927, 16742882, 16742687, 16742754, 16750508, 16742767, 16742687, 16742765, 16742759, 16750508, 16742771, 16742687, 16742720, 16742740, 16742739, 16742727, 16742687, 16742764, 16750554, 16742760, 16742688]))))())())())
            time.sleep((lambda: c2h6(encode_byte(1)))())
        else:
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16752644, 16742687, 16742726, 16742760, 16750574, 16742687, 16742765, 16742758, 16742772, 16742776, 16742889, 16742765, 16742687, 16742720, 16742740, 16742739, 16742727, 16742687, 16742759, 16742760, 16750534, 16742765, 16742687, 16742771, 16750496, 16742760, 16742688]))))())())())
            time.sleep((lambda: c2h6(encode_byte(1)))())
    return author
    __189 = 102
    __188 = 856
    __1217 = 127
headers = {(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742720, 16742754, 16742754, 16742756, 16742767, 16742771]))))())())(): (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742767, 16742767, 16742763, 16742760, 16742754, 16742752, 16742771, 16742760, 16742766, 16742765, 16742702, 16742761, 16742770, 16742766, 16742765, 16742699, 16742687, 16742771, 16742756, 16742775, 16742771, 16742702, 16742767, 16742763, 16742752, 16742760, 16742765, 16742699, 16742687, 16742697, 16742702, 16742697]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742722, 16742766, 16742765, 16742771, 16742756, 16742765, 16742771, 16742700, 16742739, 16742776, 16742767, 16742756]))))())())(): (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742767, 16742767, 16742763, 16742760, 16742754, 16742752, 16742771, 16742760, 16742766, 16742765, 16742702, 16742761, 16742770, 16742766, 16742765, 16742714, 16742754, 16742759, 16742752, 16742769, 16742770, 16742756, 16742771, 16742716, 16742772, 16742771, 16742757, 16742700, 16742711]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742720, 16742772, 16742771, 16742759, 16742766, 16742769, 16742760, 16742777, 16742752, 16742771, 16742760, 16742766, 16742765]))))())())(): input_authorization(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742740, 16742770, 16742756, 16742769, 16742700, 16742720, 16742758, 16742756, 16742765, 16742771]))))())())(): (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742732, 16742766, 16742777, 16742760, 16742763, 16742763, 16742752, 16742702, 16742708, 16742701, 16742703, 16742687, 16742695, 16742731, 16742760, 16742765, 16742772, 16742775, 16742714, 16742687, 16742720, 16742765, 16742755, 16742769, 16742766, 16742760, 16742755, 16742687, 16742704, 16742703, 16742714, 16742687, 16742730, 16742696, 16742687, 16742720, 16742767, 16742767, 16742763, 16742756, 16742742, 16742756, 16742753, 16742730, 16742760, 16742771, 16742702, 16742708, 16742706, 16742710, 16742701, 16742706, 16742709, 16742687, 16742695, 16742730, 16742727, 16742739, 16742732, 16742731, 16742699, 16742687, 16742763, 16742760, 16742762, 16742756, 16742687, 16742726, 16742756, 16742754, 16742762, 16742766, 16742696, 16742687, 16742722, 16742759, 16742769, 16742766, 16742764, 16742756, 16742702, 16742704, 16742705, 16742707, 16742701, 16742703, 16742701, 16742703, 16742701, 16742703, 16742687, 16742732, 16742766, 16742753, 16742760, 16742763, 16742756, 16742687, 16742738, 16742752, 16742757, 16742752, 16742769, 16742760, 16742702, 16742708, 16742706, 16742710, 16742701, 16742706, 16742709]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742737, 16742756, 16742757, 16742756, 16742769, 16742756, 16742769]))))())())(): (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742759, 16742771, 16742771, 16742767, 16742770, 16742713, 16742702, 16742702, 16742752, 16742767, 16742767, 16742701, 16742758, 16742766, 16742763, 16742760, 16742762, 16742756, 16742701, 16742765, 16742756, 16742771, 16742702, 16742761, 16742766, 16742753, 16742770, 16742702, 16742770, 16742765, 16742752, 16742767, 16742754, 16742759, 16742752, 16742771]))))())())()}

def get_golike_user_info():
    __1311 = 855
    __167 = 478
    __1814 = 886
    try:
        response = requests.get((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742759, 16742771, 16742771, 16742767, 16742770, 16742713, 16742702, 16742702, 16742758, 16742752, 16742771, 16742756, 16742774, 16742752, 16742776, 16742701, 16742758, 16742766, 16742763, 16742760, 16742762, 16742756, 16742701, 16742765, 16742756, 16742771, 16742702, 16742752, 16742767, 16742760, 16742702, 16742772, 16742770, 16742756, 16742769, 16742770, 16742702, 16742764, 16742756]))))())())(), headers=headers, timeout=10)
        return response.json()
    except requests.exceptions.Timeout:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742704, 16742764, 16752595, 16742687, 16742746, 16742724, 16742737, 16742737, 16742734, 16742737, 16742748, 16742687, 16742739, 16742760, 16742764, 16742756, 16742766, 16742772, 16742771, 16742687, 16742762, 16742759, 16742760, 16742687, 16742763, 16750500, 16742776, 16742687, 16742771, 16742759, 16742899, 16742765, 16742758, 16742687, 16742771, 16742760, 16742765, 16742687, 16742771, 16742879, 16742760, 16742687, 16742762, 16742759, 16742766, 16750498, 16742765, 16742687, 16742726, 16742766, 16742731, 16742760, 16742762, 16742756, 16742688, 16742687, 16742927, 16750562, 16742760, 16742687, 16742708, 16742770, 16742687, 16742928, 16750530, 16742687, 16742771, 16742759, 16750572, 16742687, 16742763, 16750496, 16742760, 16742701, 16742701, 16742701]))))())())())
        time.sleep((lambda: c2h6(encode_byte(5)))())
        return None
    except Exception as e:
        print('\x1b[1;31m⛔ [ERROR] Lỗi khi lấy thông tin tài khoản GoLike: ' + ''.join([str(str(e)), ' Đợi 5s để thử lại...']))
        time.sleep((lambda: c2h6(encode_byte(5)))())
        return None
    __418 = 904
    __69 = 301
    __1813 = 711

def get_snapchat_accounts():
    __159 = 917
    __161 = 511
    __915 = 902
    try:
        response = requests.get((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742759, 16742771, 16742771, 16742767, 16742770, 16742713, 16742702, 16742702, 16742758, 16742752, 16742771, 16742756, 16742774, 16742752, 16742776, 16742701, 16742758, 16742766, 16742763, 16742760, 16742762, 16742756, 16742701, 16742765, 16742756, 16742771, 16742702, 16742752, 16742767, 16742760, 16742702, 16742770, 16742765, 16742752, 16742767, 16742754, 16742759, 16742752, 16742771, 16742700, 16742752, 16742754, 16742754, 16742766, 16742772, 16742765, 16742771]))))())())(), headers=headers, timeout=10)
        data = response.json()
        return data
    except requests.exceptions.Timeout:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742704, 16742764, 16752595, 16742687, 16742746, 16742724, 16742737, 16742737, 16742734, 16742737, 16742748, 16742687, 16742739, 16742760, 16742764, 16742756, 16742766, 16742772, 16742771, 16742687, 16742762, 16742759, 16742760, 16742687, 16742763, 16750500, 16742776, 16742687, 16742755, 16742752, 16742765, 16742759, 16742687, 16742770, 16742880, 16742754, 16742759, 16742687, 16742771, 16742879, 16742760, 16742687, 16742762, 16742759, 16742766, 16750498, 16742765, 16742687, 16742738, 16742765, 16742752, 16742767, 16742754, 16742759, 16742752, 16742771, 16742688, 16742687, 16742927, 16750562, 16742760, 16742687, 16742708, 16742770, 16742687, 16742928, 16750530, 16742687, 16742771, 16742759, 16750572, 16742687, 16742763, 16750496, 16742760, 16742701, 16742701, 16742701]))))())())())
        time.sleep((lambda: c2h6(encode_byte(5)))())
        return None
    except Exception as e:
        print('\x1b[1;31m⛔ [ERROR] Lỗi khi lấy danh sách tài khoản Snapchat: ' + ''.join([str(str(e)), ' Đợi 5s để thử lại...']))
        time.sleep((lambda: c2h6(encode_byte(5)))())
        return None
    __1811 = 414
    __1611 = 970
    __1513 = 842

def get_snapchat_job(account_id):
    __74 = 675
    __82 = 934
    __117 = 505
    params = {(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742754, 16742754, 16742766, 16742772, 16742765, 16742771, 16742750, 16742760, 16742755]))))())())(): account_id}
    animations = [(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742779]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742702]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742700]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742747]))))())())()]
    pattern_index = 0
    while True:
        animation_text = '\x1b[1;97m🔍 Đang Lấy Nhiệm Vụ \x1b[1;33m' + ''.join([str(animations[pattern_index]), ' \x1b[1;36m[...]'])
        sys.stdout.write(animation_text + '\r')
        sys.stdout.flush()
        time.sleep(0.3)
        pattern_index = (pattern_index + 1) % len(animations)
        try:
            response = requests.get((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742759, 16742771, 16742771, 16742767, 16742770, 16742713, 16742702, 16742702, 16742758, 16742752, 16742771, 16742756, 16742774, 16742752, 16742776, 16742701, 16742758, 16742766, 16742763, 16742760, 16742762, 16742756, 16742701, 16742765, 16742756, 16742771, 16742702, 16742752, 16742767, 16742760, 16742702, 16742752, 16742755, 16742773, 16742756, 16742769, 16742771, 16742760, 16742770, 16742760, 16742765, 16742758, 16742702, 16742767, 16742772, 16742753, 16742763, 16742760, 16742770, 16742759, 16742756, 16742769, 16742770, 16742702, 16742770, 16742765, 16742752, 16742767, 16742754, 16742759, 16742752, 16742771, 16742702, 16742761, 16742766, 16742753, 16742770]))))())())(), params=params, headers=headers, timeout=10)
            sys.stdout.write(' ' * 50 + '\r')
            sys.stdout.flush()
            return response.json()
        except requests.exceptions.Timeout:
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742704, 16742764, 16752595, 16742687, 16742746, 16742724, 16742737, 16742737, 16742734, 16742737, 16742748, 16742687, 16742739, 16742760, 16742764, 16742756, 16742766, 16742772, 16742771, 16742687, 16742762, 16742759, 16742760, 16742687, 16742765, 16742759, 16750508, 16742765, 16742687, 16742765, 16742759, 16742760, 16750534, 16742764, 16742687, 16742773, 16750564, 16742688, 16742687, 16742927, 16750562, 16742760, 16742687, 16742708, 16742770, 16742687, 16742928, 16750530, 16742687, 16742771, 16742759, 16750572, 16742687, 16742763, 16750496, 16742760, 16742701, 16742701, 16742701]))))())())())
            time.sleep((lambda: c2h6(encode_byte(5)))())
            return None
        except Exception as e:
            print('\x1b[1;31m⛔ [ERROR] Lỗi khi nhận nhiệm vụ: ' + ''.join([str(str(e)), ' Đợi 5s để thử lại...']))
            time.sleep((lambda: c2h6(encode_byte(5)))())
            return None
    __48 = 630
    __916 = 900
    __112 = 135

def complete_job(ads_id, account_id):
    __163 = 314
    __165 = 282
    __136 = 807
    json_data = {(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742755, 16742770, 16742750, 16742760, 16742755]))))())())(): ads_id, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742754, 16742754, 16742766, 16742772, 16742765, 16742771, 16742750, 16742760, 16742755]))))())())(): account_id, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742770, 16742776, 16742765, 16742754]))))())())(): (lambda: (lambda n: n + (lambda: H2SbF7(30584))())(0) == 1)(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742755, 16742752, 16742771, 16742752]))))())())(): None}
    try:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742708, 16742764, 16870831, 16742687, 16742927, 16742752, 16742765, 16742758, 16742687, 16742733, 16742759, 16750508, 16742765, 16742687, 16742739, 16742760, 16750528, 16742765, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687]))))())())(), end='\r')
        response = requests.post((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742759, 16742771, 16742771, 16742767, 16742770, 16742713, 16742702, 16742702, 16742758, 16742752, 16742771, 16742756, 16742774, 16742752, 16742776, 16742701, 16742758, 16742766, 16742763, 16742760, 16742762, 16742756, 16742701, 16742765, 16742756, 16742771, 16742702, 16742752, 16742767, 16742760, 16742702, 16742752, 16742755, 16742773, 16742756, 16742769, 16742771, 16742760, 16742770, 16742760, 16742765, 16742758, 16742702, 16742767, 16742772, 16742753, 16742763, 16742760, 16742770, 16742759, 16742756, 16742769, 16742770, 16742702, 16742770, 16742765, 16742752, 16742767, 16742754, 16742759, 16742752, 16742771, 16742702, 16742754, 16742766, 16742764, 16742767, 16742763, 16742756, 16742771, 16742756, 16742700, 16742761, 16742766, 16742753, 16742770]))))())())(), headers=headers, json=json_data, timeout=10)
        return response.json()
    except requests.exceptions.Timeout:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742704, 16742764, 16752595, 16742687, 16742746, 16742724, 16742737, 16742737, 16742734, 16742737, 16742748, 16742687, 16742739, 16742760, 16742764, 16742756, 16742766, 16742772, 16742771, 16742687, 16742762, 16742759, 16742760, 16742687, 16742759, 16742766, 16742879, 16742765, 16742687, 16742771, 16742759, 16742879, 16742765, 16742759, 16742687, 16742765, 16742759, 16742760, 16750534, 16742764, 16742687, 16742773, 16750564, 16742688, 16742687, 16742927, 16750562, 16742760, 16742687, 16742708, 16742770, 16742687, 16742928, 16750530, 16742687, 16742771, 16742759, 16750572, 16742687, 16742763, 16750496, 16742760, 16742701, 16742701, 16742701]))))())())())
        time.sleep((lambda: c2h6(encode_byte(5)))())
        return None
    except Exception as e:
        print('\x1b[1;31m⛔ [ERROR] Lỗi khi hoàn thành nhiệm vụ: ' + ''.join([str(str(e)), ' Đợi 5s để thử lại...']))
        time.sleep((lambda: c2h6(encode_byte(5)))())
        return None
    __86 = 731
    __72 = 772
    __106 = 610

def report_error(ads_id, object_id, account_id, job_type):
    __23 = 656
    __1015 = 374
    __45 = 877
    json_data1 = {(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742755, 16742756, 16742770, 16742754, 16742769, 16742760, 16742767, 16742771, 16742760, 16742766, 16742765]))))())())(): (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742739, 16742899, 16742760, 16742687, 16742928, 16742882, 16742687, 16742763, 16742879, 16742764, 16742687, 16742729, 16742766, 16742753, 16742687, 16742765, 16742879, 16742776, 16742687, 16742769, 16750546, 16742760]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742772, 16742770, 16742756, 16742769, 16742770, 16742750, 16742752, 16742755, 16742773, 16742756, 16742769, 16742771, 16742760, 16742770, 16742760, 16742765, 16742758, 16742750, 16742760, 16742755]))))())())(): ads_id, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742771, 16742776, 16742767, 16742756]))))())())(): (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742755, 16742770]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742767, 16742769, 16742766, 16742773, 16742760, 16742755, 16742756, 16742769]))))())())(): (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742770, 16742765, 16742752, 16742767, 16742754, 16742759, 16742752, 16742771]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742757, 16742753, 16742750, 16742760, 16742755]))))())())(): account_id, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742756, 16742769, 16742769, 16742766, 16742769, 16742750, 16742771, 16742776, 16742767, 16742756]))))())())(): (lambda: c2h6(encode_byte(6)))()}
    json_data = {(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742755, 16742770, 16742750, 16742760, 16742755]))))())())(): ads_id, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742766, 16742753, 16742761, 16742756, 16742754, 16742771, 16742750, 16742760, 16742755]))))())())(): object_id, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742754, 16742754, 16742766, 16742772, 16742765, 16742771, 16742750, 16742760, 16742755]))))())())(): account_id, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742771, 16742776, 16742767, 16742756]))))())())(): job_type}
    try:
        requests.post((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742759, 16742771, 16742771, 16742767, 16742770, 16742713, 16742702, 16742702, 16742758, 16742752, 16742771, 16742756, 16742774, 16742752, 16742776, 16742701, 16742758, 16742766, 16742763, 16742760, 16742762, 16742756, 16742701, 16742765, 16742756, 16742771, 16742702, 16742752, 16742767, 16742760, 16742702, 16742769, 16742756, 16742767, 16742766, 16742769, 16742771, 16742702, 16742770, 16742756, 16742765, 16742755]))))())())(), headers=headers, json=json_data1, timeout=10)
        requests.post((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742759, 16742771, 16742771, 16742767, 16742770, 16742713, 16742702, 16742702, 16742758, 16742752, 16742771, 16742756, 16742774, 16742752, 16742776, 16742701, 16742758, 16742766, 16742763, 16742760, 16742762, 16742756, 16742701, 16742765, 16742756, 16742771, 16742702, 16742752, 16742767, 16742760, 16742702, 16742752, 16742755, 16742773, 16742756, 16742769, 16742771, 16742760, 16742770, 16742760, 16742765, 16742758, 16742702, 16742767, 16742772, 16742753, 16742763, 16742760, 16742770, 16742759, 16742756, 16742769, 16742770, 16742702, 16742770, 16742765, 16742752, 16742767, 16742754, 16742759, 16742752, 16742771, 16742702, 16742770, 16742762, 16742760, 16742767, 16742700, 16742761, 16742766, 16742753, 16742770]))))())())(), headers=headers, json=json_data, timeout=10)
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16752644, 16742687, 16742927, 16742882, 16742687, 16742753, 16742880, 16742766, 16742687, 16742763, 16750550, 16742760, 16742687, 16742765, 16742759, 16742760, 16750534, 16742764, 16742687, 16742773, 16750564]))))())())())
    except:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742704, 16742764, 16752595, 16742687, 16742746, 16742724, 16742737, 16742737, 16742734, 16742737, 16742748, 16742687, 16742731, 16750550, 16742760, 16742687, 16742762, 16742759, 16742760, 16742687, 16742753, 16742880, 16742766, 16742687, 16742754, 16742880, 16742766, 16742687, 16742765, 16742759, 16742760, 16750534, 16742764, 16742687, 16742773, 16750564]))))())())())
    __111 = 386
    __181 = 239
    __310 = 617

def show_accounts():
    __153 = 62
    __910 = 865
    __163 = 514
    golike_info = get_golike_user_info()
    if golike_info and golike_info.get((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742770, 16742771, 16742752, 16742771, 16742772, 16742770]))))())())()) == (lambda: c2h6(encode_byte(200)))() and ('data' in golike_info):
        golike_username = golike_info['data'].get((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742772, 16742770, 16742756, 16742769, 16742765, 16742752, 16742764, 16742756]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742740, 16742765, 16742762, 16742765, 16742766, 16742774, 16742765]))))())())())
        balance = golike_info['data'].get((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742754, 16742766, 16742760, 16742765]))))())())(), (lambda: c2h6(encode_byte(0)))())
    else:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742704, 16742764, 16752595, 16742687, 16742720, 16742772, 16742771, 16742759, 16742766, 16742769, 16742760, 16742777, 16742752, 16742771, 16742760, 16742766, 16742765, 16742687, 16742770, 16742752, 16742760, 16742687, 16742759, 16742766, 16750518, 16742754, 16742687, 16742763, 16750550, 16742760, 16742687, 16742762, 16750526, 16742771, 16742687, 16742765, 16750544, 16742760, 16742687, 16742762, 16742759, 16742760, 16742687, 16742763, 16750500, 16742776, 16742687, 16742771, 16742759, 16742899, 16742765, 16742758, 16742687, 16742771, 16742760, 16742765, 16742687, 16742726, 16742766, 16742731, 16742760, 16742762, 16742756, 16742701, 16742687, 16742730, 16742760, 16750530, 16742764, 16742687, 16742771, 16742769, 16742752, 16742687, 16742763, 16750496, 16742760, 16742688, 16742688, 16742688]))))())())())
        quit()
    clear_screen()
    print('\n\x1b[1;36m╔══════ THÔNG TIN TÀI KHOẢN GOLIKE ══════╗' + ''.join([]))
    print('\x1b[1;36m║ \x1b[1;97mTên tài khoản: \x1b[1;32m' + ''.join([str(golike_username), ' \x1b[1;36m║']))
    print('\x1b[1;36m║ \x1b[1;97mSố dư: \x1b[1;32m' + ''.join([str(balance), ' coin\x1b[1;36m', str(' ' * (20 - len(str(balance)) - 5)), '║']))
    print('\x1b[1;36m╚═══════════════════════════════════════╝' + ''.join([]))
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16870924, 16742687, 16742927, 16742752, 16742765, 16742758, 16742687, 16742763, 16750500, 16742776, 16742687, 16742755, 16742752, 16742765, 16742759, 16742687, 16742770, 16742880, 16742754, 16742759, 16742687, 16742771, 16742879, 16742760, 16742687, 16742762, 16742759, 16742766, 16750498, 16742765, 16742687, 16742738, 16742765, 16742752, 16742767, 16742754, 16742759, 16742752, 16742771, 16742701, 16742701, 16742701]))))())())())
    snapchat_accounts = get_snapchat_accounts()
    if snapchat_accounts and snapchat_accounts.get((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742770, 16742771, 16742752, 16742771, 16742772, 16742770]))))())())()) == (lambda: c2h6(encode_byte(200)))():
        if 'data' in snapchat_accounts and snapchat_accounts['data']:
            clear_screen()
            print('\n\x1b[1;36m╔══════ THÔNG TIN TÀI KHOẢN GOLIKE ══════╗' + ''.join([]))
            print('\x1b[1;36m║ \x1b[1;97mTên tài khoản: \x1b[1;32m' + ''.join([str(golike_username), ' \x1b[1;36m║']))
            print('\x1b[1;36m║ \x1b[1;97mSố dư: \x1b[1;32m' + ''.join([str(balance), ' coin\x1b[1;36m', str(' ' * (20 - len(str(balance)) - 5)), '║']))
            print('\x1b[1;36m╚═══════════════════════════════════════╝' + ''.join([]))
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742665, 16742682, 16742746, 16742704, 16742714, 16742706, 16742706, 16742764, 16870430, 16742687, 16742723, 16742720, 16742733, 16742727, 16742687, 16742738, 16742848, 16742722, 16742727, 16742687, 16742739, 16742847, 16742728, 16742687, 16742730, 16742727, 16742734, 16750497, 16742733, 16742687, 16742738, 16742733, 16742720, 16742735, 16742722, 16742727, 16742720, 16742739, 16742687, 16870430]))))())())())
            for i, acc in enumerate(snapchat_accounts['data']):
                snapchat_name = acc.get((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742765, 16742752, 16742764, 16742756]))))())())(), acc.get((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742760, 16742755]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742740, 16742765, 16742762, 16742765, 16742766, 16742774, 16742765]))))())())()))
                print('\x1b[1;97m[' + ''.join([str(i + 1), '] \x1b[1;32m', str(snapchat_name)]))
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742706, 16742764, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207]))))())())())
            return snapchat_accounts
        else:
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742704, 16742764, 16752595, 16742687, 16742746, 16742724, 16742737, 16742737, 16742734, 16742737, 16742748, 16742687, 16742730, 16742759, 16742899, 16742765, 16742758, 16742687, 16742754, 16742898, 16742687, 16742771, 16742879, 16742760, 16742687, 16742762, 16742759, 16742766, 16750498, 16742765, 16742687, 16742738, 16742765, 16742752, 16742767, 16742754, 16742759, 16742752, 16742771, 16742687, 16742765, 16742879, 16742766, 16742687, 16742771, 16742769, 16742766, 16742765, 16742758, 16742687, 16742767, 16742759, 16750498, 16742765, 16742687, 16742759, 16750546, 16742760, 16742688]))))())())())
            quit()
    else:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742704, 16742764, 16752595, 16742687, 16742720, 16742772, 16742771, 16742759, 16742766, 16742769, 16742760, 16742777, 16742752, 16742771, 16742760, 16742766, 16742765, 16742687, 16742770, 16742752, 16742760, 16742687, 16742759, 16742766, 16750518, 16742754, 16742687, 16742763, 16750550, 16742760, 16742687, 16742762, 16750526, 16742771, 16742687, 16742765, 16750544, 16742760, 16742687, 16742762, 16742759, 16742760, 16742687, 16742763, 16750500, 16742776, 16742687, 16742771, 16742879, 16742760, 16742687, 16742762, 16742759, 16742766, 16750498, 16742765, 16742687, 16742738, 16742765, 16742752, 16742767, 16742754, 16742759, 16742752, 16742771, 16742701, 16742687, 16742730, 16742760, 16750530, 16742764, 16742687, 16742771, 16742769, 16742752, 16742687, 16742763, 16750496, 16742760, 16742688, 16742688, 16742688]))))())())())
        quit()
    __1410 = 639
    __510 = 986
    __198 = 992

def save_adb_config(device_ip_port, x, y):
    __178 = 293
    __179 = 350
    __217 = 821
    config = {(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742755, 16742756, 16742773, 16742760, 16742754, 16742756, 16742750, 16742760, 16742767, 16742750, 16742767, 16742766, 16742769, 16742771]))))())())(): device_ip_port, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742775]))))())())(): x, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742776]))))())())(): y}
    with open((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742755, 16742753, 16742750, 16742754, 16742766, 16742765, 16742757, 16742760, 16742758, 16742701, 16742771, 16742775, 16742771]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742774]))))())())()) as f:
        json.dump(config, f)
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16752644, 16742687, 16742927, 16742882, 16742687, 16742763, 16743087, 16742772, 16742687, 16742754, 16750500, 16742772, 16742687, 16742759, 16742891, 16742765, 16742759, 16742687, 16742720, 16742723, 16742721, 16742687, 16742773, 16742879, 16742766, 16742687, 16742752, 16742755, 16742753, 16742750, 16742754, 16742766, 16742765, 16742757, 16742760, 16742758, 16742701, 16742771, 16742775, 16742771]))))())())())
    __817 = 113
    __16 = 733
    __137 = 585

def load_adb_config():
    __413 = 931
    __1311 = 135
    __137 = 30
    try:
        with open((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742755, 16742753, 16742750, 16742754, 16742766, 16742765, 16742757, 16742760, 16742758, 16742701, 16742771, 16742775, 16742771]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742769]))))())())()) as f:
            config = json.load(f)
            if 'device_ip_port' in config and 'x' in config and ('y' in config):
                return (config['device_ip_port'], config['x'], config['y'])
        return (None, None, None)
    except (FileNotFoundError, json.JSONDecodeError):
        return (None, None, None)
    __178 = 57
    __41 = 349
    __312 = 467

def setup_adb_wifi():
    __1016 = 843
    __174 = 141
    __138 = 643
    clear_screen()
    device_ip_port_saved, x_saved, y_saved = load_adb_config()
    if device_ip_port_saved and x_saved is not None and (y_saved is not None):
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742739, 16742859, 16742732, 16742687, 16742739, 16742727, 16750499, 16742744, 16742687, 16742722, 16750499, 16742740, 16742687, 16742727, 16742859, 16742733, 16742727, 16742687, 16742720, 16742723, 16742721, 16742687, 16742927, 16742850, 16742687, 16742731, 16743086, 16742740, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
        print('\x1b[1;36m║ \x1b[1;97mDevice IP:Port: \x1b[1;32m' + ''.join([str(device_ip_port_saved), ' \x1b[1;36m║']))
        print('\x1b[1;36m║ \x1b[1;97mTọa độ (x, y): \x1b[1;32m(' + ''.join([str(x_saved), ', ', str(y_saved), ')', str(' ' * (20 - len(str(x_saved) + str(y_saved)))), '║']))
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752223, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752226]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742746, 16742724, 16742765, 16742771, 16742756, 16742769, 16742748, 16742687, 16742738, 16750572, 16742687, 16742755, 16750564, 16742765, 16742758, 16742687, 16742754, 16750500, 16742772, 16742687, 16742759, 16742891, 16742765, 16742759, 16742687, 16742928, 16742882, 16742687, 16742763, 16743087, 16742772, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742746, 16742733, 16742759, 16750508, 16742767, 16742687, 16742753, 16750500, 16742771, 16742687, 16742762, 16750578, 16742748, 16742687, 16742739, 16750496, 16742766, 16742687, 16742754, 16750500, 16742772, 16742687, 16742759, 16742891, 16742765, 16742759, 16742687, 16742764, 16750554, 16742760, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())
        choice = input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16870950, 16742687, 16742733, 16742759, 16750500, 16742765, 16742687, 16742724, 16742765, 16742771, 16742756, 16742769, 16742687, 16742928, 16750530, 16742687, 16742755, 16742904, 16742765, 16742758, 16742687, 16742754, 16750500, 16742772, 16742687, 16742759, 16742891, 16742765, 16742759, 16742687, 16742754, 16743016, 16742687, 16742759, 16742766, 16750518, 16742754, 16742687, 16742765, 16742759, 16750508, 16742767, 16742687, 16742928, 16750530, 16742687, 16742771, 16750496, 16742766, 16742687, 16742764, 16750554, 16742760, 16742713, 16742687]))))())())())
        if not choice:
            print('\x1b[1;32m✅ Sử dụng cấu hình đã lưu: ' + ''.join([str(device_ip_port_saved), ', (', str(x_saved), ', ', str(y_saved), ')']))
            time.sleep((lambda: c2h6(encode_byte(1)))())
            return (device_ip_port_saved, float(x_saved), float(y_saved))
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742730, 16750525, 16742739, 16742687, 16742733, 16750543, 16742728, 16742687, 16742720, 16742723, 16742721, 16742687, 16742736, 16742740, 16742720, 16742687, 16742742, 16742728, 16742725, 16742728, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742727, 16743087, 16750554, 16742765, 16742758, 16742687, 16742755, 16750506, 16742765, 16742713, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16742704, 16742701, 16742687, 16742741, 16742879, 16742766, 16742687, 16742738, 16742756, 16742771, 16742771, 16742760, 16742765, 16742758, 16742770, 16742687, 16742717, 16742687, 16742723, 16742756, 16742773, 16742756, 16742763, 16742766, 16742767, 16742756, 16742769, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16742687, 16742687, 16742687, 16742734, 16742767, 16742771, 16742760, 16742766, 16742765, 16742770, 16742687, 16742717, 16742687, 16742742, 16742760, 16742769, 16742756, 16742763, 16742756, 16742770, 16742770, 16742687, 16742723, 16742756, 16742753, 16742772, 16742758, 16742758, 16742760, 16742765, 16742758, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16742705, 16742701, 16742687, 16742722, 16742759, 16750540, 16742765, 16742687, 16742689, 16742735, 16742752, 16742760, 16742769, 16742687, 16742755, 16742756, 16742773, 16742760, 16742754, 16742756, 16742687, 16742774, 16742760, 16742771, 16742759, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16742687, 16742687, 16742687, 16742767, 16742752, 16742760, 16742769, 16742760, 16742765, 16742758, 16742687, 16742754, 16742766, 16742755, 16742756, 16742689, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16742706, 16742701, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742728, 16742735, 16742699, 16742687, 16742735, 16742766, 16742769, 16742771, 16742699, 16742687, 16742773, 16742879, 16742687, 16742764, 16742882, 16742687, 16742758, 16742759, 16742888, 16742767, 16742687, 16742765, 16750544, 16742760, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())
    try:
        ip_port = input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16870950, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742728, 16742735, 16742713, 16742735, 16742766, 16742769, 16742771, 16742687, 16742695, 16742773, 16742892, 16742687, 16742755, 16750564, 16742713, 16742687, 16742704, 16742712, 16742705, 16742701, 16742704, 16742709, 16742711, 16742701, 16742704, 16742701, 16742704, 16742703, 16742703, 16742713, 16742704, 16742705, 16742706, 16742707, 16742708, 16742696, 16742713, 16742687]))))())())())
        pairing_code = input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16870950, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742764, 16742882, 16742687, 16742758, 16742759, 16742888, 16742767, 16742687, 16742765, 16750544, 16742760, 16742687, 16742695, 16742709, 16742687, 16742754, 16742759, 16750574, 16742687, 16742770, 16750544, 16742696, 16742713, 16742687]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742706, 16742764, 16870924, 16742687, 16742927, 16742752, 16742765, 16742758, 16742687, 16742758, 16742759, 16742888, 16742767, 16742687, 16742765, 16750544, 16742760, 16742687, 16742771, 16742759, 16742760, 16750526, 16742771, 16742687, 16742753, 16750538, 16742701, 16742701, 16742701]))))())())())
        result = subprocess.run([(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742755, 16742753]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742767, 16742752, 16742760, 16742769]))))())())(), ip_port, pairing_code], capture_output=True, text=True)
        if 'Successfully paired' in result.stdout:
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16752644, 16742687, 16742726, 16742759, 16742888, 16742767, 16742687, 16742765, 16750544, 16742760, 16742687, 16742771, 16742759, 16742879, 16742765, 16742759, 16742687, 16742754, 16742899, 16742765, 16742758, 16742688]))))())())())
        else:
            print('\x1b[1;31m⛔ Ghép nối thất bại: ' + ''.join([str(result.stderr)]))
            sys.exit((lambda: c2h6(encode_byte(1)))())
        connect_ip_port = input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16870950, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742728, 16742735, 16742713, 16742735, 16742766, 16742769, 16742771, 16742687, 16742928, 16750530, 16742687, 16742762, 16750526, 16742771, 16742687, 16742765, 16750544, 16742760, 16742687, 16742695, 16742728, 16742735, 16742713, 16742735, 16742766, 16742769, 16742771, 16742687, 16742754, 16750566, 16742752, 16742687, 16742764, 16742880, 16742776, 16742696, 16742713, 16742687]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742706, 16742764, 16870924, 16742687, 16742927, 16742752, 16742765, 16742758, 16742687, 16742762, 16750526, 16742771, 16742687, 16742765, 16750544, 16742760, 16742687, 16742771, 16742759, 16742760, 16750526, 16742771, 16742687, 16742753, 16750538, 16742701, 16742701, 16742701]))))())())())
        result = subprocess.run([(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742755, 16742753]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742754, 16742766, 16742765, 16742765, 16742756, 16742754, 16742771]))))())())(), connect_ip_port], capture_output=True, text=True)
        if 'connected to' in result.stdout:
            print('\x1b[1;32m✅ Kết nối thành công đến ' + ''.join([str(connect_ip_port), '!']))
        else:
            print('\x1b[1;31m⛔ Kết nối thất bại: ' + ''.join([str(result.stderr)]))
            sys.exit((lambda: c2h6(encode_byte(1)))())
    except FileNotFoundError:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742704, 16742764, 16752595, 16742687, 16742746, 16742724, 16742737, 16742737, 16742734, 16742737, 16742748, 16742687, 16742720, 16742723, 16742721, 16742687, 16742762, 16742759, 16742899, 16742765, 16742758, 16742687, 16742928, 16743087, 16750562, 16742754, 16742687, 16742754, 16742879, 16742760, 16742687, 16742928, 16750518, 16742771, 16742687, 16742759, 16742766, 16750518, 16742754, 16742687, 16742762, 16742759, 16742899, 16742765, 16742758, 16742687, 16742754, 16742898, 16742687, 16742771, 16742769, 16742766, 16742765, 16742758, 16742687, 16742735, 16742720, 16742739, 16742727, 16742688]))))())())())
        sys.exit((lambda: c2h6(encode_byte(1)))())
    except Exception as e:
        print('\x1b[1;31m⛔ [ERROR] Lỗi khi thiết lập ADB WiFi: ' + ''.join([str(str(e))]))
        sys.exit((lambda: c2h6(encode_byte(1)))())
    x, y = input_coordinates()
    save_adb_config(connect_ip_port, x, y)
    return (connect_ip_port, x, y)
    __119 = 434
    __516 = 914
    __97 = 755

def input_coordinates():
    __1218 = 266
    __317 = 236
    __86 = 697
    clear_screen()
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742733, 16742727, 16750507, 16742735, 16742687, 16742739, 16750539, 16742720, 16742687, 16742927, 16750551, 16742687, 16742733, 16742873, 16742739, 16742687, 16742689, 16742739, 16742727, 16742857, 16742732, 16742689, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742727, 16743087, 16750554, 16742765, 16742758, 16742687, 16742755, 16750506, 16742765, 16742713, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16742704, 16742701, 16742687, 16742732, 16750558, 16742687, 16742738, 16742765, 16742752, 16742767, 16742754, 16742759, 16742752, 16742771, 16742687, 16742771, 16742769, 16742889, 16742765, 16742687, 16742771, 16742759, 16742760, 16750526, 16742771, 16742687, 16742753, 16750538, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16742705, 16742701, 16742687, 16742723, 16742904, 16742765, 16742758, 16742687, 16742763, 16750534, 16742765, 16742759, 16742687, 16742689, 16742752, 16742755, 16742753, 16742687, 16742770, 16742759, 16742756, 16742763, 16742763, 16742687, 16742758, 16742756, 16742771, 16742756, 16742773, 16742756, 16742765, 16742771, 16742689, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16742687, 16742687, 16742687, 16742759, 16742766, 16750518, 16742754, 16742687, 16742754, 16742899, 16742765, 16742758, 16742687, 16742754, 16750564, 16742687, 16742772, 16742760, 16742752, 16742772, 16742771, 16742766, 16742764, 16742752, 16742771, 16742766, 16742769, 16742773, 16742760, 16742756, 16742774, 16742756, 16742769, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16742706, 16742701, 16742687, 16742743, 16742880, 16742754, 16742687, 16742928, 16750538, 16742765, 16742759, 16742687, 16742771, 16750540, 16742752, 16742687, 16742928, 16750552, 16742687, 16742695, 16742775, 16742699, 16742687, 16742776, 16742696, 16742687, 16742765, 16742905, 16742771, 16742687, 16742739, 16742759, 16742889, 16742764, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())
    while True:
        try:
            x = float(input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16870950, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742771, 16750540, 16742752, 16742687, 16742928, 16750552, 16742687, 16742743, 16742687, 16742695, 16742754, 16742898, 16742687, 16742771, 16742759, 16750530, 16742687, 16742763, 16742879, 16742687, 16742770, 16750544, 16742687, 16742771, 16742759, 16750508, 16742767, 16742687, 16742767, 16742759, 16742881, 16742765, 16742696, 16742713, 16742687]))))())())()))
            y = float(input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16870950, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742771, 16750540, 16742752, 16742687, 16742928, 16750552, 16742687, 16742744, 16742687, 16742695, 16742754, 16742898, 16742687, 16742771, 16742759, 16750530, 16742687, 16742763, 16742879, 16742687, 16742770, 16750544, 16742687, 16742771, 16742759, 16750508, 16742767, 16742687, 16742767, 16742759, 16742881, 16742765, 16742696, 16742713, 16742687]))))())())()))
            if x >= (lambda: c2h6(encode_byte(0)))() and y >= (lambda: c2h6(encode_byte(0)))():
                x_rounded = math.ceil(x)
                y_rounded = math.ceil(y)
                print('\x1b[1;32m✅ Tọa độ sẽ được làm tròn thành: (' + ''.join([str(x_rounded), ', ', str(y_rounded), ')']))
                time.sleep((lambda: c2h6(encode_byte(1)))())
                return (x, y)
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742704, 16742764, 16752595, 16742687, 16742739, 16750540, 16742752, 16742687, 16742928, 16750552, 16742687, 16742767, 16742759, 16750498, 16742760, 16742687, 16742763, 16742879, 16742687, 16742770, 16750544, 16742687, 16742762, 16742759, 16742899, 16742765, 16742758, 16742687, 16742881, 16742764, 16742688]))))())())())
        except ValueError:
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742704, 16742764, 16752595, 16742687, 16742741, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742765, 16742759, 16750508, 16742767, 16742687, 16742770, 16750544, 16742687, 16742759, 16750562, 16742767, 16742687, 16742763, 16750534, 16742688]))))())())())
    __42 = 281
    __89 = 90
    __1615 = 941

def extract_username(link):
    __315 = 826
    __918 = 847
    __71 = 570
    try:
        if '/add/' in link:
            username = link.split((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742702, 16742752, 16742755, 16742755, 16742702]))))())())())[1].split((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742718]))))())())())[0] if '?' in link else link.split((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742702, 16742752, 16742755, 16742755, 16742702]))))())())())[1]
            return username
        return 'Unknown'
    except:
        return 'Unknown'
    __74 = 629
    __710 = 322
    __1719 = 819

def perform_snapchat_task(link, wait_time, job_type, use_adb, device_ip_port=None, x=None, y=None):
    __616 = 895
    __118 = 709
    __1819 = 905
    try:
        if use_adb:
            if not device_ip_port or x is None or y is None:
                raise ValueError((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742739, 16742759, 16742760, 16750526, 16742772, 16742687, 16742771, 16742759, 16742899, 16742765, 16742758, 16742687, 16742771, 16742760, 16742765, 16742687, 16742771, 16742759, 16742760, 16750526, 16742771, 16742687, 16742753, 16750538, 16742687, 16742759, 16742766, 16750518, 16742754, 16742687, 16742771, 16750540, 16742752, 16742687, 16742928, 16750552, 16742687, 16742762, 16742759, 16742760, 16742687, 16742755, 16742904, 16742765, 16742758, 16742687, 16742720, 16742723, 16742721, 16742688]))))())())())
            x_rounded = math.ceil(float(x))
            y_rounded = math.ceil(float(y))
            subprocess.run([(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742755, 16742753]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742700, 16742770]))))())())(), device_ip_port, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742770, 16742759, 16742756, 16742763, 16742763]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742764]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742770, 16742771, 16742752, 16742769, 16742771]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742700, 16742752]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742765, 16742755, 16742769, 16742766, 16742760, 16742755, 16742701, 16742760, 16742765, 16742771, 16742756, 16742765, 16742771, 16742701, 16742752, 16742754, 16742771, 16742760, 16742766, 16742765, 16742701, 16742741, 16742728, 16742724, 16742742]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742700, 16742755]))))())())(), link], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print('\x1b[1;36m🔗 Đã mở link Snapchat (' + ''.join([str(job_type), ') qua ADB']), end='\r', flush=True)
            time.sleep((lambda: c2h6(encode_byte(3)))())
            subprocess.run([(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742755, 16742753]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742700, 16742770]))))())())(), device_ip_port, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742770, 16742759, 16742756, 16742763, 16742763]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742760, 16742765, 16742767, 16742772, 16742771]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742771, 16742752, 16742767]))))())())(), str(x_rounded), str(y_rounded)], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print("\x1b[1;36m👆 Đã nhấn nút 'Thêm' tại tọa độ (" + ''.join([str(x_rounded), ', ', str(y_rounded), ')']), end='\r', flush=True)
        else:
            system = platform.system()
            if system == (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742742, 16742760, 16742765, 16742755, 16742766, 16742774, 16742770]))))())())():
                os.system('start ' + ''.join([str(link)]))
            elif system == (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742723, 16742752, 16742769, 16742774, 16742760, 16742765]))))())())():
                os.system('open ' + ''.join([str(link)]))
            else:
                os.system('xdg-open ' + ''.join([str(link)]))
            print('\x1b[1;36m🔗 Đã mở link Snapchat (' + ''.join([str(job_type), ') trên trình duyệt']), end='\r', flush=True)
            print("\x1b[1;33m👉 Vui lòng nhấn nút 'Thêm' trên Snapchat thủ công!" + ''.join([]), end='\r', flush=True)
        for remaining in range(int(float(wait_time)), (lambda: c2h6(encode_byte(0)))(), -1):
            print('\x1b[1;36m⏳ Chờ hoàn thành: ' + ''.join([str(remaining), 's   ']), end='\r', flush=True)
            time.sleep((lambda: c2h6(encode_byte(1)))())
        print(' ' * 50, end='\r', flush=True)
    except subprocess.CalledProcessError as e:
        print('\x1b[1;31m⛔ [ERROR] Lỗi khi thực hiện tác vụ qua ADB: ' + ''.join([str(str(e))]))
    except Exception as e:
        print('\x1b[1;31m⛔ [ERROR] Lỗi khi thực hiện tác vụ: ' + ''.join([str(str(e))]))
    __105 = 697
    __1415 = 371
    __164 = 387

def choose_mode():
    __114 = 198
    __112 = 970
    __195 = 593
    clear_screen()
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742722, 16742727, 16750539, 16742733, 16742687, 16742722, 16742727, 16750525, 16742687, 16742927, 16750551, 16742687, 16742722, 16742727, 16750495, 16742744, 16742687, 16742739, 16742734, 16742734, 16742731, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742746, 16742704, 16742748, 16742687, 16742738, 16750572, 16742687, 16742755, 16750564, 16742765, 16742758, 16742687, 16742720, 16742723, 16742721, 16742687, 16742695, 16742739, 16750576, 16742687, 16742928, 16750552, 16742765, 16742758, 16742687, 16742765, 16742759, 16750500, 16742765, 16742696, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742746, 16742705, 16742748, 16742687, 16742730, 16742759, 16742899, 16742765, 16742758, 16742687, 16742755, 16742904, 16742765, 16742758, 16742687, 16742720, 16742723, 16742721, 16742687, 16742695, 16742733, 16742759, 16750500, 16742765, 16742687, 16742771, 16742759, 16750566, 16742687, 16742754, 16742899, 16742765, 16742758, 16742696, 16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())
    while True:
        try:
            choice = int(input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742705, 16742764, 16870950, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742763, 16750576, 16742752, 16742687, 16742754, 16742759, 16750540, 16742765, 16742687, 16742695, 16742704, 16742687, 16742759, 16742766, 16750518, 16742754, 16742687, 16742705, 16742696, 16742713, 16742687]))))())())()))
            if choice in [(lambda: c2h6(encode_byte(1)))(), (lambda: c2h6(encode_byte(2)))()]:
                return choice == (lambda: c2h6(encode_byte(1)))()
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742704, 16742764, 16752595, 16742687, 16742741, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742754, 16742759, 16750540, 16742765, 16742687, 16742704, 16742687, 16742759, 16742766, 16750518, 16742754, 16742687, 16742705, 16742688]))))())())())
        except ValueError:
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742704, 16742764, 16752595, 16742687, 16742741, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742765, 16742759, 16750508, 16742767, 16742687, 16742770, 16750544, 16742687, 16742759, 16750562, 16742767, 16742687, 16742763, 16750534, 16742688]))))())())())
    __212 = 654
    __189 = 978
    __146 = 770
clear_screen()
use_adb = choose_mode()
device_ip_port = None
x, y = (None, None)
if use_adb:
    device_ip_port, x, y = setup_adb_wifi()
else:
    device_ip_port = None
    x, y = (None, None)
accounts = show_accounts()
while True:
    try:
        choice = int(input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742708, 16742764, 16752439, 16742687, 16742722, 16742759, 16750540, 16742765, 16742687, 16742770, 16750544, 16742687, 16742771, 16742759, 16750568, 16742687, 16742771, 16750576, 16742687, 16742771, 16742879, 16742760, 16742687, 16742762, 16742759, 16742766, 16750498, 16742765, 16742687, 16742738, 16742765, 16742752, 16742767, 16742754, 16742759, 16742752, 16742771, 16742687, 16742928, 16750530, 16742687, 16742754, 16742759, 16750496, 16742776, 16742713, 16742687]))))())())()))
        if 1 <= choice <= len(accounts['data']):
            selected_account = accounts['data'][choice - 1]
            account_id = selected_account['id']
            snapchat_name = selected_account.get((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742765, 16742752, 16742764, 16742756]))))())())(), selected_account.get((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742760, 16742755]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742740, 16742765, 16742762, 16742765, 16742766, 16742774, 16742765]))))())())()))
            print('\x1b[1;32m=> Đã chọn tài khoản Snapchat: \x1b[1;93m' + ''.join([str(snapchat_name)]))
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16742700, 16742700, 16742700, 16742700, 16742700, 16742700, 16742700, 16742700, 16742700, 16742700]))))())())())
            break
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742704, 16742764, 16752595, 16742687, 16742738, 16750544, 16742687, 16742771, 16742759, 16750568, 16742687, 16742771, 16750576, 16742687, 16742762, 16742759, 16742899, 16742765, 16742758, 16742687, 16742759, 16750562, 16742767, 16742687, 16742763, 16750534, 16742699, 16742687, 16742759, 16742882, 16742776, 16742687, 16742754, 16742759, 16750540, 16742765, 16742687, 16742763, 16750496, 16742760, 16742688]))))())())())
    except:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742708, 16742764, 16752543, 16807694, 16742687, 16742741, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742765, 16742759, 16750508, 16742767, 16742687, 16742770, 16750544, 16742687, 16742771, 16742759, 16750568, 16742687, 16742771, 16750576, 16742687, 16742759, 16750562, 16742767, 16742687, 16742763, 16750534, 16742688]))))())())())
print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742709, 16742764, 16742700, 16742700, 16742700, 16742700, 16742700, 16742700, 16742700, 16742700, 16742700, 16742700]))))())())())
print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16751858, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742771, 16742759, 16750556, 16742760, 16742687, 16742758, 16742760, 16742752, 16742765, 16742687, 16742754, 16742759, 16750556, 16742687, 16742695, 16742758, 16742760, 16742881, 16742776, 16742699, 16742687, 16742764, 16750518, 16742754, 16742687, 16742928, 16750538, 16742765, 16742759, 16742687, 16742704, 16742703, 16742687, 16742770, 16742687, 16742765, 16750526, 16742772, 16742687, 16742928, 16750530, 16742687, 16742771, 16742769, 16750544, 16742765, 16742758, 16742696, 16742713]))))())())())
wait_time = input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742717, 16742687]))))())())()).strip() or (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742704, 16742703]))))())())()
try:
    float(wait_time)
except ValueError:
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742704, 16742764, 16752595, 16742687, 16742739, 16742759, 16750556, 16742760, 16742687, 16742758, 16742760, 16742752, 16742765, 16742687, 16742754, 16742759, 16750556, 16742687, 16742767, 16742759, 16750498, 16742760, 16742687, 16742763, 16742879, 16742687, 16742770, 16750544, 16742688, 16742687, 16742723, 16742904, 16742765, 16742758, 16742687, 16742764, 16750518, 16742754, 16742687, 16742928, 16750538, 16742765, 16742759, 16742687, 16742704, 16742703, 16742687, 16742758, 16742760, 16742881, 16742776, 16742701]))))())())())
    wait_time = '10'
clear_screen()
count = 0
total_earn = 0
print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742706, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742927, 16742720, 16742733, 16742726, 16742687, 16742722, 16742727, 16750495, 16742744, 16742687, 16742739, 16742734, 16742734, 16742731, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
if use_adb:
    print('\x1b[1;33m║ Kết nối WiFi: ' + ''.join([str(device_ip_port), ' ║']))
    print('\x1b[1;33m║ Tọa độ "Thêm": (' + ''.join([str(math.ceil(float(x))), ', ', str(math.ceil(float(y))), ')', str(' ' * (15 - len(str(math.ceil(float(x))) + str(math.ceil(float(y)))))), '║']))
else:
    print('\x1b[1;33m║ Chế độ: Không dùng ADB (Nhấn thủ công) ║' + ''.join([]))
print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742706, 16742706, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())
while True:
    job = get_snapchat_job(account_id)
    if job and job.get((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742770, 16742771, 16742752, 16742771, 16742772, 16742770]))))())())()) == (lambda: c2h6(encode_byte(200)))() and ('data' in job):
        ads_id = job['data']['id']
        link = job['data']['link']
        object_id = job['data']['object_id']
        job_type = job['data']['type']
        task_content = extract_username(link)
        perform_snapchat_task(link, wait_time, job_type, use_adb, device_ip_port, x, y)
        result = complete_job(ads_id, account_id)
        if result and result.get((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742770, 16742771, 16742752, 16742771, 16742772, 16742770]))))())())()) == (lambda: c2h6(encode_byte(200)))() and ('data' in result):
            count += 1
            earn = result['data']['prices']
            total_earn += earn
            current_time = time.strftime((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742692, 16742727, 16742713, 16742692, 16742732, 16742713, 16742692, 16742738]))))())())())
            print('\x1b[1;36m[' + ''.join([str(count), '] \x1b[1;33m', str(current_time), ' \x1b[1;32m✔ Success \x1b[1;31m', str(job_type), ' \x1b[1;32mNội dung: ', str(task_content), ' \x1b[1;97m+', str(earn), ' \x1b[1;33mTổng: ', str(total_earn)]))
        else:
            print('\x1b[1;31m⛔ Nhận tiền thất bại: ' + ''.join([str(result.get('message', 'Lỗi không xác định') if result else 'Không có phản hồi'), ' Đợi 5s để tiếp tục...']))
            report_error(ads_id, object_id, account_id, job_type)
        time.sleep((lambda: c2h6(encode_byte(2)))())
    else:
        print('\x1b[1;31m⛔ Không lấy được nhiệm vụ: ' + ''.join([str(job.get('message', 'Lỗi không xác định') if job else 'Không có phản hồi'), ' Đợi 5s để thử lại...']))
        time.sleep((lambda: c2h6(encode_byte(5)))())