
import hashlib
current_hash = hashlib.sha256(open(__file__, 'rb').read()).hexdigest()
if current_hash != '304b59282dff4a8c082110963da133893c991dbd5df9e142198800056d684e88':
    print('File đã bị thay đổi! Thoát chương trình.')
    __import__('sys').exit(1)
# Công cụ mã hóa nâng cao bởi Nguyễn Văn Đạt

globals()['mol'] = bool
globals()['co2'] = str
globals()['feo2'] = type
globals()['h2so4'] = int
globals()['feso4'] = bytes
globals()['h2o3'] = eval
globals()['agno4'] = list
globals()['h3o'] = map
globals()['ch2oh4p2so4'] = __import__

def h2o(july, *k):
    encode = '' if not k else '+'
    result = ''
    for e in july:
        result += co2(e)
    return result

def H2SbF7(x):
    return h2so4(x - 0x7777)

def c2h6(e):
    br = bytearray(e[len(b'encode/'):])
    r = 0
    for b in br:
        r = r * 256 + b
    return r

def o2(x):
    x -= 0xFF78FF
    if x <= 0x7F:
        return co2(feso4([x]), 'utf8')
    elif x <= 0xFFFF:
        b1 = 0xE0 | (x >> 12)
        b2 = 0x80 | ((x >> 6) & 0x3F)
        b3 = 0x80 | (x & 0x3F)
        return co2(feso4([b1, b2, b3]), 'utf8')
    return chr(x - 0xFF78FF)
import json
import requests
import os
import time
import subprocess
import sys
import re
import platform
import math
banner = '\x1b[1;94m╔════════════════════════════════════════════════════╗\n\x1b[1;94m║       TOOL GOLIKE TIKTOK VIP PRO - VANDAT          ║\n\x1b[1;94m╠════════════════════════════════════════════════════╣\n\x1b[1;92m║  Admin: \x1b[1;96mVANDAT \x1b[1;92m| Contact: \x1b[1;96m0982470331       ║\n\x1b[1;92m║  YouTube: \x1b[1;96m@sieucode \x1b[1;92m| Version: \x1b[1;96m1.2         ║\n\x1b[1;94m╚════════════════════════════════════════════════════╝\n'
auth_file = '/sdcard/download/Authorization.txt'
token_file = '/sdcard/download/token_file.txt'
adb_config_file = '/sdcard/download/adb_config.json'

def clear_screen():
    __415 = 626
    __1913 = 746
    __108 = 179
    os.system('cls' if os.name == (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742765, 16742771]))))())())() else 'clear')
    __817 = 541
    __74 = 241
    __918 = 619

def create_file_if_not_exists(file_path, is_json=(lambda: (lambda n: n - (lambda: H2SbF7(30584))())(0) == 1)()):
    __215 = 981
    __161 = 99
    __1115 = 153
    if not os.path.exists(file_path):
        try:
            with open(file_path, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742774]))))())())()) as f:
                if is_json:
                    json.dump({}, f)
                else:
                    f.write('')
            print('\x1b[1;94m╔════════════════════════════════════╗' + ''.join([]))
            print('\x1b[1;94m║ \x1b[1;92m✔ Tạo file ' + ''.join([str(os.path.basename(file_path)), ' thành công! \x1b[1;94m║']))
            print('\x1b[1;94m╚════════════════════════════════════╝' + ''.join([]))
        except PermissionError:
            print('\x1b[1;94m╔════════════════════════════════════╗' + ''.join([]))
            print('\x1b[1;94m║ \x1b[1;91m✖ Không có quyền tạo file!       \x1b[1;94m║' + ''.join([]))
            print('\x1b[1;94m║ \x1b[1;91m  Kiểm tra quyền hoặc chạy root  \x1b[1;94m║' + ''.join([]))
            print('\x1b[1;94m╚════════════════════════════════════╝' + ''.join([]))
            exit((lambda: c2h6(encode_byte(1)))())
        except Exception as e:
            print('\x1b[1;94m╔════════════════════════════════════╗' + ''.join([]))
            print('\x1b[1;94m║ \x1b[1;91m✖ Lỗi khi tạo file: ' + ''.join([str(str(e)[:20]), ' \x1b[1;94m║']))
            print('\x1b[1;94m╚════════════════════════════════════╝' + ''.join([]))
            exit((lambda: c2h6(encode_byte(1)))())
    __64 = 579
    __114 = 960
    __63 = 206

def read_from_file(file_path, is_json=(lambda: (lambda n: n - (lambda: H2SbF7(30584))())(0) == 1)()):
    __167 = 212
    __113 = 446
    __614 = 30
    try:
        with open(file_path, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742769]))))())())()) as f:
            if is_json:
                return json.load(f)
            content = f.read().strip()
            return content if content else None
    except:
        return {} if is_json else None
    __135 = 592
    __1014 = 731
    __813 = 846

def write_to_json_file(file_path, data):
    __164 = 321
    __914 = 8
    __183 = 218
    try:
        with open(file_path, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742774]))))())())()) as f:
            json.dump(data, f, indent=4)
        return True
    except Exception as e:
        print('\x1b[1;91m✖ Lỗi khi ghi file JSON: ' + ''.join([str(str(e))]))
        return False
    __161 = 464
    __141 = 437
    __1613 = 797

def get_golike_info():
    __197 = 435
    __137 = 50
    __1719 = 467
    try:
        response = requests.get((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742759, 16742771, 16742771, 16742767, 16742770, 16742713, 16742702, 16742702, 16742758, 16742752, 16742771, 16742756, 16742774, 16742752, 16742776, 16742701, 16742758, 16742766, 16742763, 16742760, 16742762, 16742756, 16742701, 16742765, 16742756, 16742771, 16742702, 16742752, 16742767, 16742760, 16742702, 16742772, 16742770, 16742756, 16742769, 16742770, 16742702, 16742764, 16742756]))))())())(), headers=headers, timeout=5).json()
        if response['status'] == (lambda: c2h6(encode_byte(200)))():
            return (response['data']['username'], response['data']['coin'])
        return ((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742730, 16742759, 16742899, 16742765, 16742758, 16742687, 16742775, 16742880, 16742754, 16742687, 16742928, 16750538, 16742765, 16742759]))))())())(), (lambda: c2h6(encode_byte(0)))())
    except requests.Timeout:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742727, 16750526, 16742771, 16742687, 16742771, 16742759, 16750556, 16742760, 16742687, 16742758, 16742760, 16742752, 16742765, 16742687, 16742754, 16742759, 16750556, 16742687, 16742720, 16742735, 16742728, 16742699, 16742687, 16742773, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742762, 16742760, 16750530, 16742764, 16742687, 16742771, 16742769, 16742752, 16742687, 16742762, 16750526, 16742771, 16742687, 16742765, 16750544, 16742760, 16742688]))))())())())
        return ((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742731, 16750550, 16742760, 16742687, 16742762, 16750526, 16742771, 16742687, 16742765, 16750544, 16742760]))))())())(), (lambda: c2h6(encode_byte(0)))())
    except:
        return ((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742731, 16750550, 16742760, 16742687, 16742762, 16750526, 16742771, 16742687, 16742765, 16750544, 16742760]))))())())(), (lambda: c2h6(encode_byte(0)))())
    __1311 = 177
    __169 = 320
    __101 = 938

def show_loading():
    __514 = 766
    __214 = 162
    __610 = 987
    for i in range((lambda: c2h6(encode_byte(3)))()):
        print('\x1b[1;92m⏳ Đang xác nhận thông tin... ' + ''.join([str(i + 1), '/3']), end='\r')
        time.sleep((lambda: c2h6(encode_byte(1)))())
    print(' ' * 50, end='\r')
    __1819 = 474
    __35 = 160
    __1016 = 507

def input_auth_token():
    __119 = 357
    __1816 = 283
    __156 = 773
    saved_auth = read_from_file(auth_file)
    saved_token = read_from_file(token_file)
    if saved_auth and saved_token:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742739, 16742727, 16742867, 16742733, 16742726, 16742687, 16742739, 16742728, 16742733, 16742687, 16742927, 16742850, 16742687, 16742731, 16743086, 16742740, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
        print('\x1b[1;94m║ \x1b[1;92mAuthorization: \x1b[1;97m' + ''.join([str(saved_auth[:20]), '... \x1b[1;94m║']))
        print('\x1b[1;94m║ \x1b[1;92mToken: \x1b[1;97m' + ''.join([str(saved_token[:20]), '...         \x1b[1;94m║']))
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())
        while True:
            use_saved = input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16752803, 16742687, 16742738, 16750572, 16742687, 16742755, 16750564, 16742765, 16742758, 16742687, 16742763, 16750496, 16742760, 16742687, 16742771, 16742759, 16742899, 16742765, 16742758, 16742687, 16742771, 16742760, 16742765, 16742687, 16742754, 16743016, 16742718, 16742687, 16742695, 16742776, 16742702, 16742765, 16742696, 16742713, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764]))))())())()).lower()
            if use_saved in [(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742776]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742765]))))())())()]:
                break
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742741, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742765, 16742759, 16750508, 16742767, 16742687, 16742776, 16742687, 16742759, 16742766, 16750518, 16742754, 16742687, 16742765, 16742688]))))())())())
        if use_saved == (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742776]))))())())():
            headers['Authorization'] = saved_auth
            headers['t'] = saved_token
            show_loading()
            username, balance = get_golike_info()
            if username != (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742731, 16750550, 16742760, 16742687, 16742762, 16750526, 16742771, 16742687, 16742765, 16750544, 16742760]))))())())() and username != (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742730, 16742759, 16742899, 16742765, 16742758, 16742687, 16742775, 16742880, 16742754, 16742687, 16742928, 16750538, 16742765, 16742759]))))())())():
                clear_screen()
                print(banner)
                print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742739, 16742727, 16742867, 16742733, 16742726, 16742687, 16742739, 16742728, 16742733, 16742687, 16742726, 16742734, 16742731, 16742728, 16742730, 16742724, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
                print('\x1b[1;94m║ \x1b[1;92mTài khoản: \x1b[1;97m' + ''.join([str(username), ' \x1b[1;94m║']))
                print('\x1b[1;94m║ \x1b[1;92mSố dư:     \x1b[1;93m' + ''.join([str(balance), ' coin', str(' ' * (25 - len(str(balance)))), ' \x1b[1;94m║']))
                print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220, 16742665]))))())())())
                return (saved_auth, saved_token)
            else:
                print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742739, 16742759, 16742899, 16742765, 16742758, 16742687, 16742771, 16742760, 16742765, 16742687, 16742754, 16743016, 16742687, 16742762, 16742759, 16742899, 16742765, 16742758, 16742687, 16742759, 16750562, 16742767, 16742687, 16742763, 16750534, 16742699, 16742687, 16742773, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742765, 16742759, 16750508, 16742767, 16742687, 16742763, 16750496, 16742760, 16742688]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742733, 16742727, 16750507, 16742735, 16742687, 16742739, 16742727, 16742867, 16742733, 16742726, 16742687, 16742739, 16742728, 16742733, 16742687, 16742732, 16750553, 16742728, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
    author = input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16752803, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742720, 16742772, 16742771, 16742759, 16742766, 16742769, 16742760, 16742777, 16742752, 16742771, 16742760, 16742766, 16742765, 16742713, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764]))))())())())
    token = input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16752803, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742739, 16742766, 16742762, 16742756, 16742765, 16742687, 16742695, 16742739, 16742696, 16742713, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())
    headers['Authorization'] = author
    headers['t'] = token
    show_loading()
    username, balance = get_golike_info()
    if username != (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742731, 16750550, 16742760, 16742687, 16742762, 16750526, 16742771, 16742687, 16742765, 16750544, 16742760]))))())())() and username != (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742730, 16742759, 16742899, 16742765, 16742758, 16742687, 16742775, 16742880, 16742754, 16742687, 16742928, 16750538, 16742765, 16742759]))))())())():
        with open(auth_file, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742774]))))())())()) as Authorization, open(token_file, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742774]))))())())()) as t:
            Authorization.write(author)
            t.write(token)
        clear_screen()
        print(banner)
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742739, 16742727, 16742867, 16742733, 16742726, 16742687, 16742739, 16742728, 16742733, 16742687, 16742726, 16742734, 16742731, 16742728, 16742730, 16742724, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
        print('\x1b[1;94m║ \x1b[1;92mTài khoản: \x1b[1;97m' + ''.join([str(username), ' \x1b[1;94m║']))
        print('\x1b[1;94m║ \x1b[1;92mSố dư:     \x1b[1;93m' + ''.join([str(balance), ' coin', str(' ' * (25 - len(str(balance)))), ' \x1b[1;94m║']))
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220, 16742665]))))())())())
        return (author, token)
    else:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742720, 16742772, 16742771, 16742759, 16742766, 16742769, 16742760, 16742777, 16742752, 16742771, 16742760, 16742766, 16742765, 16742687, 16742759, 16742766, 16750518, 16742754, 16742687, 16742739, 16742766, 16742762, 16742756, 16742765, 16742687, 16742762, 16742759, 16742899, 16742765, 16742758, 16742687, 16742759, 16750562, 16742767, 16742687, 16742763, 16750534, 16742699, 16742687, 16742773, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742771, 16742759, 16750572, 16742687, 16742763, 16750496, 16742760, 16742688]))))())())())
        exit((lambda: c2h6(encode_byte(1)))())
    __103 = 759
    __109 = 957
    __169 = 216
headers = {(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742720, 16742754, 16742754, 16742756, 16742767, 16742771]))))())())(): (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742767, 16742767, 16742763, 16742760, 16742754, 16742752, 16742771, 16742760, 16742766, 16742765, 16742702, 16742761, 16742770, 16742766, 16742765, 16742699, 16742687, 16742771, 16742756, 16742775, 16742771, 16742702, 16742767, 16742763, 16742752, 16742760, 16742765, 16742699, 16742687, 16742697, 16742702, 16742697]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742722, 16742766, 16742765, 16742771, 16742756, 16742765, 16742771, 16742700, 16742739, 16742776, 16742767, 16742756]))))())())(): (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742767, 16742767, 16742763, 16742760, 16742754, 16742752, 16742771, 16742760, 16742766, 16742765, 16742702, 16742761, 16742770, 16742766, 16742765, 16742714, 16742754, 16742759, 16742752, 16742769, 16742770, 16742756, 16742771, 16742716, 16742772, 16742771, 16742757, 16742700, 16742711]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742720, 16742772, 16742771, 16742759, 16742766, 16742769, 16742760, 16742777, 16742752, 16742771, 16742760, 16742766, 16742765]))))())())(): '', (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742771]))))())())(): '', (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742740, 16742770, 16742756, 16742769, 16742700, 16742720, 16742758, 16742756, 16742765, 16742771]))))())())(): (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742732, 16742766, 16742777, 16742760, 16742763, 16742763, 16742752, 16742702, 16742708, 16742701, 16742703, 16742687, 16742695, 16742731, 16742760, 16742765, 16742772, 16742775, 16742714, 16742687, 16742720, 16742765, 16742755, 16742769, 16742766, 16742760, 16742755, 16742687, 16742704, 16742703, 16742714, 16742687, 16742730, 16742696, 16742687, 16742720, 16742767, 16742767, 16742763, 16742756, 16742742, 16742756, 16742753, 16742730, 16742760, 16742771, 16742702, 16742708, 16742706, 16742710, 16742701, 16742706, 16742709, 16742687, 16742695, 16742730, 16742727, 16742739, 16742732, 16742731, 16742699, 16742687, 16742763, 16742760, 16742762, 16742756, 16742687, 16742726, 16742756, 16742754, 16742762, 16742766, 16742696, 16742687, 16742722, 16742759, 16742769, 16742766, 16742764, 16742756, 16742702, 16742704, 16742705, 16742707, 16742701, 16742703, 16742701, 16742703, 16742701, 16742703, 16742687, 16742732, 16742766, 16742753, 16742760, 16742763, 16742756, 16742687, 16742738, 16742752, 16742757, 16742752, 16742769, 16742760, 16742702, 16742708, 16742706, 16742710, 16742701, 16742706, 16742709]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742737, 16742756, 16742757, 16742756, 16742769, 16742756, 16742769]))))())())(): (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742759, 16742771, 16742771, 16742767, 16742770, 16742713, 16742702, 16742702, 16742752, 16742767, 16742767, 16742701, 16742758, 16742766, 16742763, 16742760, 16742762, 16742756, 16742701, 16742765, 16742756, 16742771, 16742702, 16742752, 16742754, 16742754, 16742766, 16742772, 16742765, 16742771, 16742702, 16742764, 16742752, 16742765, 16742752, 16742758, 16742756, 16742769, 16742702, 16742771, 16742760, 16742762, 16742771, 16742766, 16742762]))))())())()}

def chonacc():
    __1319 = 715
    __85 = 643
    __1711 = 602
    try:
        response = requests.get((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742759, 16742771, 16742771, 16742767, 16742770, 16742713, 16742702, 16742702, 16742758, 16742752, 16742771, 16742756, 16742774, 16742752, 16742776, 16742701, 16742758, 16742766, 16742763, 16742760, 16742762, 16742756, 16742701, 16742765, 16742756, 16742771, 16742702, 16742752, 16742767, 16742760, 16742702, 16742771, 16742760, 16742762, 16742771, 16742766, 16742762, 16742700, 16742752, 16742754, 16742754, 16742766, 16742772, 16742765, 16742771]))))())())(), headers=headers, timeout=5).json()
        if response['status'] == (lambda: c2h6(encode_byte(200)))() and response.get((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742755, 16742752, 16742771, 16742752]))))())())()):
            return response
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742731, 16750550, 16742760, 16742713, 16742687, 16742730, 16742759, 16742899, 16742765, 16742758, 16742687, 16742763, 16750500, 16742776, 16742687, 16742928, 16743087, 16750562, 16742754, 16742687, 16742755, 16742752, 16742765, 16742759, 16742687, 16742770, 16742880, 16742754, 16742759, 16742687, 16742771, 16742879, 16742760, 16742687, 16742762, 16742759, 16742766, 16750498, 16742765, 16742687, 16742739, 16742760, 16742762, 16742739, 16742766, 16742762, 16742688]))))())())())
        return None
    except requests.Timeout:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742727, 16750526, 16742771, 16742687, 16742771, 16742759, 16750556, 16742760, 16742687, 16742758, 16742760, 16742752, 16742765, 16742687, 16742754, 16742759, 16750556, 16742687, 16742720, 16742735, 16742728, 16742699, 16742687, 16742773, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742762, 16742760, 16750530, 16742764, 16742687, 16742771, 16742769, 16742752, 16742687, 16742762, 16750526, 16742771, 16742687, 16742765, 16750544, 16742760, 16742688]))))())())())
        return None
    except Exception as e:
        print('\x1b[1;91m✖ Lỗi kết nối API: ' + ''.join([str(str(e))]))
        return None
    __215 = 648
    __1812 = 288
    __199 = 493

def display_main_interface():
    __919 = 320
    __713 = 680
    __105 = 805
    chontktiktok = chonacc()
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742739, 16742847, 16742728, 16742687, 16742730, 16742727, 16742734, 16750497, 16742733, 16742687, 16742739, 16742728, 16742730, 16742739, 16742734, 16742730, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
    if chontktiktok and chontktiktok['data']:
        for i, acc in enumerate(chontktiktok['data'], (lambda: c2h6(encode_byte(1)))()):
            print('\x1b[1;94m║ \x1b[1;92m[' + ''.join([str(i), '] \x1b[1;97m', str(acc['nickname']), ' \x1b[1;93m', str(acc['id']), ' \x1b[1;94m║']))
    else:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16742730, 16742759, 16742899, 16742765, 16742758, 16742687, 16742754, 16742898, 16742687, 16742771, 16742879, 16742760, 16742687, 16742762, 16742759, 16742766, 16750498, 16742765, 16742687, 16742739, 16742760, 16742762, 16742739, 16742766, 16742762, 16742687, 16742765, 16742879, 16742766, 16742688, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())
    return chontktiktok
    __101 = 152
    __103 = 18
    __197 = 178

def perform_tiktok_task_termux(link, delay):
    __69 = 882
    __92 = 779
    __1511 = 157
    try:
        result = subprocess.run([(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742771, 16742756, 16742769, 16742764, 16742772, 16742775, 16742700, 16742766, 16742767, 16742756, 16742765, 16742700, 16742772, 16742769, 16742763]))))())())(), link], capture_output=True, text=True)
        if result.returncode == (lambda: c2h6(encode_byte(0)))():
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16752659, 16742687, 16742927, 16742882, 16742687, 16742764, 16750558, 16742687, 16742763, 16742760, 16742765, 16742762, 16742687, 16742739, 16742760, 16742762, 16742739, 16742766, 16742762, 16742687, 16742768, 16742772, 16742752, 16742687, 16742739, 16742756, 16742769, 16742764, 16742772, 16742775, 16742688]))))())())())
            for remaining in range(delay, (lambda: c2h6(encode_byte(0)))(), -1):
                print('\x1b[1;92m⏳ Chờ: ' + ''.join([str(remaining), 's', str(' ' * 10)]), end='\r')
                time.sleep((lambda: c2h6(encode_byte(1)))())
            print(' ' * 50, end='\r')
            return True
        else:
            print('\x1b[1;91m✖ Lỗi khi mở link qua Termux: ' + ''.join([str(result.stderr[:50])]))
            return False
    except FileNotFoundError:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742739, 16742756, 16742769, 16742764, 16742772, 16742775, 16742687, 16742762, 16742759, 16742899, 16742765, 16742758, 16742687, 16742928, 16743087, 16750562, 16742754, 16742687, 16742754, 16742879, 16742760, 16742687, 16742928, 16750518, 16742771, 16742687, 16742759, 16742766, 16750518, 16742754, 16742687, 16742762, 16742759, 16742899, 16742765, 16742758, 16742687, 16742771, 16742891, 16742764, 16742687, 16742771, 16742759, 16750500, 16742776, 16742687, 16742763, 16750534, 16742765, 16742759, 16742687, 16742771, 16742756, 16742769, 16742764, 16742772, 16742775, 16742700, 16742766, 16742767, 16742756, 16742765, 16742700, 16742772, 16742769, 16742763, 16742688]))))())())())
        return False
    except Exception as e:
        print('\x1b[1;91m✖ Lỗi khi thực thi: ' + ''.join([str(str(e))]))
        return False
    __26 = 725
    __1412 = 226
    __719 = 186

def setup_adb_wifi():
    __19 = 884
    __178 = 282
    __1719 = 916
    create_file_if_not_exists(adb_config_file, is_json=True)
    adb_config = read_from_file(adb_config_file, is_json=True)
    if 'devices' not in adb_config:
        adb_config['devices'] = []

    def try_connect_existing_device(device):
        __41 = 345
        __1410 = 407
        __113 = 711
        device_ip_port = device['device_ip_port']
        result = subprocess.run([(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742755, 16742753]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742754, 16742766, 16742765, 16742765, 16742756, 16742754, 16742771]))))())())(), device_ip_port], capture_output=True, text=True)
        if 'connected to' in result.stdout:
            print('\x1b[1;92m✔ Kết nối lại thành công đến ' + ''.join([str(device_ip_port), '!']))
            return (device_ip_port, float(device['x']), float(device['y']))
        return None
        __12 = 642
        __415 = 785
        __25 = 902
    if adb_config['devices']:
        clear_screen()
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742723, 16742720, 16742733, 16742727, 16742687, 16742738, 16742848, 16742722, 16742727, 16742687, 16742739, 16742727, 16742728, 16750525, 16742739, 16742687, 16742721, 16750537, 16742687, 16742720, 16742723, 16742721, 16742687, 16742927, 16742850, 16742687, 16742731, 16743086, 16742740, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
        for i, device in enumerate(adb_config['devices'], (lambda: c2h6(encode_byte(1)))()):
            print('\x1b[1;94m║ \x1b[1;92m[' + ''.join([str(i), '] IP:Port: \x1b[1;97m', str(device['device_ip_port']), ' \x1b[1;94m║']))
            print('\x1b[1;94m║      Tọa độ: \x1b[1;97m(' + ''.join([str(device['x']), ', ', str(device['y']), ')', str(' ' * (20 - len(device['x'] + device['y']))), ' \x1b[1;94m║']))
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752223, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752226]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16742746, 16742703, 16742748, 16742687, 16742739, 16742759, 16742889, 16742764, 16742687, 16742771, 16742759, 16742760, 16750526, 16742771, 16742687, 16742753, 16750538, 16742687, 16742764, 16750554, 16742760, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())
        while True:
            try:
                choice = int(input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16752803, 16742687, 16742722, 16742759, 16750540, 16742765, 16742687, 16742771, 16742759, 16742760, 16750526, 16742771, 16742687, 16742753, 16750538, 16742687, 16742695, 16742703, 16742687, 16742928, 16750530, 16742687, 16742771, 16742759, 16742889, 16742764, 16742687, 16742764, 16750554, 16742760, 16742696, 16742713, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764]))))())())()))
                if 0 <= choice <= len(adb_config['devices']):
                    break
                print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742731, 16750576, 16742752, 16742687, 16742754, 16742759, 16750540, 16742765, 16742687, 16742762, 16742759, 16742899, 16742765, 16742758, 16742687, 16742759, 16750562, 16742767, 16742687, 16742763, 16750534, 16742688]))))())())())
            except ValueError:
                print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742741, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742765, 16742759, 16750508, 16742767, 16742687, 16742770, 16750544, 16742687, 16742759, 16750562, 16742767, 16742687, 16742763, 16750534, 16742688]))))())())())
        if choice > (lambda: c2h6(encode_byte(0)))():
            selected_device = adb_config['devices'][choice - 1]
            result = try_connect_existing_device(selected_device)
            if result:
                return result
            else:
                print('\x1b[1;91m✖ Không thể kết nối đến ' + ''.join([str(selected_device['device_ip_port']), ', sẽ xóa khỏi danh sách!']))
                adb_config['devices'].pop(choice - 1)
                write_to_json_file(adb_config_file, adb_config)
    clear_screen()
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742730, 16750525, 16742739, 16742687, 16742733, 16750543, 16742728, 16742687, 16742720, 16742723, 16742721, 16742687, 16742736, 16742740, 16742720, 16742687, 16742742, 16742728, 16742725, 16742728, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16742727, 16743087, 16750554, 16742765, 16742758, 16742687, 16742755, 16750506, 16742765, 16742713, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742704, 16742701, 16742687, 16742741, 16742879, 16742766, 16742687, 16742738, 16742756, 16742771, 16742771, 16742760, 16742765, 16742758, 16742770, 16742687, 16742717, 16742687, 16742723, 16742756, 16742773, 16742756, 16742763, 16742766, 16742767, 16742756, 16742769, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742687, 16742687, 16742687, 16742734, 16742767, 16742771, 16742760, 16742766, 16742765, 16742770, 16742687, 16742717, 16742687, 16742742, 16742760, 16742769, 16742756, 16742763, 16742756, 16742770, 16742770, 16742687, 16742723, 16742756, 16742753, 16742772, 16742758, 16742758, 16742760, 16742765, 16742758, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742705, 16742701, 16742687, 16742722, 16742759, 16750540, 16742765, 16742687, 16742689, 16742735, 16742752, 16742760, 16742769, 16742687, 16742755, 16742756, 16742773, 16742760, 16742754, 16742756, 16742687, 16742774, 16742760, 16742771, 16742759, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742687, 16742687, 16742687, 16742767, 16742752, 16742760, 16742769, 16742760, 16742765, 16742758, 16742687, 16742754, 16742766, 16742755, 16742756, 16742689, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742706, 16742701, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742728, 16742735, 16742713, 16742735, 16742766, 16742769, 16742771, 16742687, 16742758, 16742759, 16742888, 16742767, 16742687, 16742765, 16750544, 16742760, 16742699, 16742687, 16742764, 16742882, 16742699, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742687, 16742687, 16742687, 16742773, 16742879, 16742687, 16742728, 16742735, 16742713, 16742735, 16742766, 16742769, 16742771, 16742687, 16742762, 16750526, 16742771, 16742687, 16742765, 16750544, 16742760, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())

    def is_valid_ip_port(ip_port):
        __914 = 111
        __106 = 818
        __123 = 234
        pattern = '^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}:\\d{1,5}$'
        return re.match(pattern, ip_port) is not None
        __412 = 756
        __511 = 924
        __1413 = 673
    try:
        while True:
            ip_port_pair = input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16752803, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742728, 16742735, 16742713, 16742735, 16742766, 16742769, 16742771, 16742687, 16742758, 16742759, 16742888, 16742767, 16742687, 16742765, 16750544, 16742760, 16742687, 16742695, 16742741, 16742723, 16742713, 16742687, 16742704, 16742712, 16742705, 16742701, 16742704, 16742709, 16742711, 16742701, 16742707, 16742706, 16742701, 16742705, 16742706, 16742706, 16742713, 16742707, 16742703, 16742706, 16742712, 16742708, 16742696, 16742713, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764]))))())())())
            if is_valid_ip_port(ip_port_pair):
                break
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742927, 16750538, 16742765, 16742759, 16742687, 16742755, 16750496, 16742765, 16742758, 16742687, 16742728, 16742735, 16742713, 16742735, 16742766, 16742769, 16742771, 16742687, 16742762, 16742759, 16742899, 16742765, 16742758, 16742687, 16742759, 16750562, 16742767, 16742687, 16742763, 16750534, 16742688, 16742687, 16742741, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742765, 16742759, 16750508, 16742767, 16742687, 16742763, 16750496, 16742760, 16742701]))))())())())
        while True:
            pairing_code = input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16752803, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742764, 16742882, 16742687, 16742758, 16742759, 16742888, 16742767, 16742687, 16742765, 16750544, 16742760, 16742687, 16742695, 16742741, 16742723, 16742713, 16742687, 16742708, 16742705, 16742707, 16742704, 16742705, 16742706, 16742696, 16742713, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764]))))())())())
            if pairing_code.isdigit() and len(pairing_code) == (lambda: c2h6(encode_byte(6)))():
                break
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742732, 16742882, 16742687, 16742758, 16742759, 16742888, 16742767, 16742687, 16742765, 16750544, 16742760, 16742687, 16742767, 16742759, 16750498, 16742760, 16742687, 16742763, 16742879, 16742687, 16742709, 16742687, 16742754, 16742759, 16750574, 16742687, 16742770, 16750544, 16742688]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742706, 16742764, 16751858, 16742687, 16742927, 16742752, 16742765, 16742758, 16742687, 16742758, 16742759, 16742888, 16742767, 16742687, 16742765, 16750544, 16742760, 16742687, 16742771, 16742759, 16742760, 16750526, 16742771, 16742687, 16742753, 16750538, 16742701, 16742701, 16742701]))))())())())
        result = subprocess.run([(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742755, 16742753]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742767, 16742752, 16742760, 16742769]))))())())(), ip_port_pair, pairing_code], capture_output=True, text=True)
        if 'Successfully paired' not in result.stdout:
            print('\x1b[1;91m✖ Ghép nối thất bại: ' + ''.join([str(result.stderr)]))
            sys.exit((lambda: c2h6(encode_byte(1)))())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16752659, 16742687, 16742726, 16742759, 16742888, 16742767, 16742687, 16742765, 16750544, 16742760, 16742687, 16742771, 16742759, 16742879, 16742765, 16742759, 16742687, 16742754, 16742899, 16742765, 16742758, 16742688]))))())())())
        while True:
            connect_ip_port = input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16752803, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742728, 16742735, 16742713, 16742735, 16742766, 16742769, 16742771, 16742687, 16742762, 16750526, 16742771, 16742687, 16742765, 16750544, 16742760, 16742687, 16742695, 16742741, 16742723, 16742713, 16742687, 16742704, 16742712, 16742705, 16742701, 16742704, 16742709, 16742711, 16742701, 16742707, 16742706, 16742701, 16742705, 16742706, 16742706, 16742713, 16742707, 16742706, 16742706, 16742705, 16742712, 16742696, 16742713, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764]))))())())())
            if is_valid_ip_port(connect_ip_port):
                break
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742927, 16750538, 16742765, 16742759, 16742687, 16742755, 16750496, 16742765, 16742758, 16742687, 16742728, 16742735, 16742713, 16742735, 16742766, 16742769, 16742771, 16742687, 16742762, 16742759, 16742899, 16742765, 16742758, 16742687, 16742759, 16750562, 16742767, 16742687, 16742763, 16750534, 16742688, 16742687, 16742741, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742765, 16742759, 16750508, 16742767, 16742687, 16742763, 16750496, 16742760, 16742701]))))())())())
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742706, 16742764, 16751858, 16742687, 16742927, 16742752, 16742765, 16742758, 16742687, 16742762, 16750526, 16742771, 16742687, 16742765, 16750544, 16742760, 16742687, 16742771, 16742759, 16742760, 16750526, 16742771, 16742687, 16742753, 16750538, 16742701, 16742701, 16742701]))))())())())
        result = subprocess.run([(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742755, 16742753]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742754, 16742766, 16742765, 16742765, 16742756, 16742754, 16742771]))))())())(), connect_ip_port], capture_output=True, text=True)
        if 'connected to' not in result.stdout:
            print('\x1b[1;91m✖ Kết nối thất bại: ' + ''.join([str(result.stderr)]))
            sys.exit((lambda: c2h6(encode_byte(1)))())
        print('\x1b[1;92m✔ Kết nối thành công đến ' + ''.join([str(connect_ip_port), '!']))
        x, y = input_coordinates()
        new_device = {(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742755, 16742756, 16742773, 16742760, 16742754, 16742756, 16742750, 16742760, 16742767, 16742750, 16742767, 16742766, 16742769, 16742771]))))())())(): connect_ip_port, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742775]))))())())(): str(x), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742776]))))())())(): str(y)}
        for i, device in enumerate(adb_config['devices']):
            if device['device_ip_port'] == connect_ip_port:
                adb_config['devices'][i] = new_device
                break
        else:
            adb_config['devices'].append(new_device)
        if write_to_json_file(adb_config_file, adb_config):
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16752659, 16742687, 16742927, 16742882, 16742687, 16742763, 16743087, 16742772, 16742687, 16742771, 16742759, 16742899, 16742765, 16742758, 16742687, 16742771, 16742760, 16742765, 16742687, 16742771, 16742759, 16742760, 16750526, 16742771, 16742687, 16742753, 16750538, 16742687, 16742720, 16742723, 16742721, 16742687, 16742773, 16742879, 16742766, 16742687, 16742755, 16742752, 16742765, 16742759, 16742687, 16742770, 16742880, 16742754, 16742759, 16742688]))))())())())
        else:
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742731, 16743087, 16742772, 16742687, 16742771, 16742759, 16742899, 16742765, 16742758, 16742687, 16742771, 16742760, 16742765, 16742687, 16742771, 16742759, 16742760, 16750526, 16742771, 16742687, 16742753, 16750538, 16742687, 16742771, 16742759, 16750500, 16742771, 16742687, 16742753, 16750496, 16742760, 16742688]))))())())())
        return (connect_ip_port, x, y)
    except FileNotFoundError:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742720, 16742723, 16742721, 16742687, 16742762, 16742759, 16742899, 16742765, 16742758, 16742687, 16742928, 16743087, 16750562, 16742754, 16742687, 16742754, 16742879, 16742760, 16742687, 16742928, 16750518, 16742771, 16742687, 16742759, 16742766, 16750518, 16742754, 16742687, 16742762, 16742759, 16742899, 16742765, 16742758, 16742687, 16742754, 16742898, 16742687, 16742771, 16742769, 16742766, 16742765, 16742758, 16742687, 16742735, 16742720, 16742739, 16742727, 16742688]))))())())())
        sys.exit((lambda: c2h6(encode_byte(1)))())
    except Exception as e:
        print('\x1b[1;91m✖ Lỗi khi thiết lập ADB WiFi: ' + ''.join([str(str(e))]))
        sys.exit((lambda: c2h6(encode_byte(1)))())
    __158 = 796
    __95 = 740
    __139 = 525

def input_coordinates():
    __513 = 154
    __1817 = 387
    __142 = 37
    clear_screen()
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742733, 16742727, 16750507, 16742735, 16742687, 16742739, 16750539, 16742720, 16742687, 16742927, 16750551, 16742687, 16742733, 16742873, 16742739, 16742687, 16742689, 16742725, 16742734, 16742731, 16742731, 16742734, 16742742, 16742689, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16742727, 16743087, 16750554, 16742765, 16742758, 16742687, 16742755, 16750506, 16742765, 16742713, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742704, 16742701, 16742687, 16742732, 16750558, 16742687, 16742739, 16742760, 16742762, 16742739, 16742766, 16742762, 16742687, 16742771, 16742769, 16742889, 16742765, 16742687, 16742771, 16742759, 16742760, 16750526, 16742771, 16742687, 16742753, 16750538, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742705, 16742701, 16742687, 16742723, 16742904, 16742765, 16742758, 16742687, 16742763, 16750534, 16742765, 16742759, 16742687, 16742689, 16742752, 16742755, 16742753, 16742687, 16742770, 16742759, 16742756, 16742763, 16742763, 16742687, 16742758, 16742756, 16742771, 16742756, 16742773, 16742756, 16742765, 16742771, 16742689, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742687, 16742687, 16742687, 16742759, 16742766, 16750518, 16742754, 16742687, 16742754, 16742899, 16742765, 16742758, 16742687, 16742754, 16750564, 16742687, 16742689, 16742773, 16750538, 16742687, 16742771, 16742769, 16742892, 16742687, 16742754, 16742766, 16742765, 16742687, 16742771, 16742769, 16750542, 16742689, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764, 16742706, 16742701, 16742687, 16742743, 16742880, 16742754, 16742687, 16742928, 16750538, 16742765, 16742759, 16742687, 16742771, 16750540, 16742752, 16742687, 16742928, 16750552, 16742687, 16742695, 16742775, 16742699, 16742687, 16742776, 16742696, 16742687, 16742765, 16742905, 16742771, 16742687, 16742725, 16742766, 16742763, 16742763, 16742766, 16742774, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())
    while True:
        try:
            x = float(input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16752803, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742771, 16750540, 16742752, 16742687, 16742928, 16750552, 16742687, 16742743, 16742687, 16742695, 16742741, 16742723, 16742713, 16742687, 16742706, 16742707, 16742708, 16742701, 16742709, 16742696, 16742713, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764]))))())())()))
            y = float(input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16752803, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742771, 16750540, 16742752, 16742687, 16742928, 16750552, 16742687, 16742744, 16742687, 16742695, 16742741, 16742723, 16742713, 16742687, 16742704, 16742703, 16742703, 16742703, 16742701, 16742705, 16742696, 16742713, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764]))))())())()))
            if x >= (lambda: c2h6(encode_byte(0)))() and y >= (lambda: c2h6(encode_byte(0)))():
                x_rounded = math.ceil(x)
                y_rounded = math.ceil(y)
                print('\x1b[1;92m✔ Tọa độ sẽ được làm tròn thành: (' + ''.join([str(x_rounded), ', ', str(y_rounded), ')']))
                time.sleep((lambda: c2h6(encode_byte(1)))())
                return (x, y)
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742739, 16750540, 16742752, 16742687, 16742928, 16750552, 16742687, 16742767, 16742759, 16750498, 16742760, 16742687, 16742763, 16742879, 16742687, 16742770, 16750544, 16742687, 16742762, 16742759, 16742899, 16742765, 16742758, 16742687, 16742881, 16742764, 16742688]))))())())())
        except ValueError:
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742741, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742765, 16742759, 16750508, 16742767, 16742687, 16742770, 16750544, 16742687, 16742759, 16750562, 16742767, 16742687, 16742763, 16750534, 16742688]))))())())())
    __1711 = 901
    __1019 = 639
    __617 = 303

def perform_tiktok_task_adb(link, delay, x=None, y=None, device_ip_port=None):
    __1015 = 706
    __1217 = 556
    __914 = 1000
    try:
        if not device_ip_port or x is None or y is None:
            raise ValueError((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742739, 16742759, 16742760, 16750526, 16742772, 16742687, 16742771, 16742759, 16742899, 16742765, 16742758, 16742687, 16742771, 16742760, 16742765, 16742687, 16742771, 16742759, 16742760, 16750526, 16742771, 16742687, 16742753, 16750538, 16742687, 16742759, 16742766, 16750518, 16742754, 16742687, 16742771, 16750540, 16742752, 16742687, 16742928, 16750552, 16742687, 16742762, 16742759, 16742760, 16742687, 16742755, 16742904, 16742765, 16742758, 16742687, 16742720, 16742723, 16742721, 16742688]))))())())())
        x_rounded = math.ceil(float(x))
        y_rounded = math.ceil(float(y))
        subprocess.run([(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742755, 16742753]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742700, 16742770]))))())())(), device_ip_port, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742770, 16742759, 16742756, 16742763, 16742763]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742764]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742770, 16742771, 16742752, 16742769, 16742771]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742700, 16742752]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742765, 16742755, 16742769, 16742766, 16742760, 16742755, 16742701, 16742760, 16742765, 16742771, 16742756, 16742765, 16742771, 16742701, 16742752, 16742754, 16742771, 16742760, 16742766, 16742765, 16742701, 16742741, 16742728, 16742724, 16742742]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742700, 16742755]))))())())(), link], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        print('\x1b[1;94m🔗 Đã mở link TikTok qua ADB' + ''.join([]), end='\r', flush=True)
        time.sleep((lambda: c2h6(encode_byte(2)))())
        subprocess.run([(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742755, 16742753]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742700, 16742770]))))())())(), device_ip_port, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742770, 16742759, 16742756, 16742763, 16742763]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742760, 16742765, 16742767, 16742772, 16742771]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742771, 16742752, 16742767]))))())())(), str(x_rounded), str(y_rounded)], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        print("\x1b[1;94m👆 Đã nhấn nút 'Follow'    tọa độ (" + ''.join([str(x_rounded), ', ', str(y_rounded), ')']), end='\r', flush=True)
        for remaining in range(int(float(delay)), (lambda: c2h6(encode_byte(0)))(), -1):
            print('\x1b[1;92m⏳ Chờ hoàn thành: ' + ''.join([str(remaining), 's   ']), end='\r', flush=True)
            time.sleep((lambda: c2h6(encode_byte(1)))())
        print(' ' * 50, end='\r', flush=True)
        return True
    except subprocess.CalledProcessError as e:
        print('\x1b[1;91m✖ Lỗi khi thực hiện tác vụ qua ADB: ' + ''.join([str(str(e))]))
        return False
    except Exception as e:
        print('\x1b[1;91m✖ Lỗi khi thực hiện tác vụ: ' + ''.join([str(str(e))]))
        return False
    __314 = 240
    __1413 = 327
    __1814 = 138

def validate_link(link):
    __56 = 466
    __413 = 284
    __159 = 913
    tiktok_domains = [(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742771, 16742760, 16742762, 16742771, 16742766, 16742762, 16742701, 16742754, 16742766, 16742764]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742773, 16742771, 16742701, 16742771, 16742760, 16742762, 16742771, 16742766, 16742762, 16742701, 16742754, 16742766, 16742764]))))())())()]
    return any((domain in link for domain in tiktok_domains))
    __199 = 153
    __1716 = 71
    __219 = 612

def nhannv(account_id):
    __101 = 23
    __1214 = 214
    __1110 = 484
    params = {(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742754, 16742754, 16742766, 16742772, 16742765, 16742771, 16742750, 16742760, 16742755]))))())())(): account_id, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742755, 16742752, 16742771, 16742752]))))())())(): (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742765, 16742772, 16742763, 16742763]))))())())()}
    try:
        return requests.get((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742759, 16742771, 16742771, 16742767, 16742770, 16742713, 16742702, 16742702, 16742758, 16742752, 16742771, 16742756, 16742774, 16742752, 16742776, 16742701, 16742758, 16742766, 16742763, 16742760, 16742762, 16742756, 16742701, 16742765, 16742756, 16742771, 16742702, 16742752, 16742767, 16742760, 16742702, 16742752, 16742755, 16742773, 16742756, 16742769, 16742771, 16742760, 16742770, 16742760, 16742765, 16742758, 16742702, 16742767, 16742772, 16742753, 16742763, 16742760, 16742770, 16742759, 16742756, 16742769, 16742770, 16742702, 16742771, 16742760, 16742762, 16742771, 16742766, 16742762, 16742702, 16742761, 16742766, 16742753, 16742770]))))())())(), params=params, headers=headers, timeout=5).json()
    except requests.Timeout:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742727, 16750526, 16742771, 16742687, 16742771, 16742759, 16750556, 16742760, 16742687, 16742758, 16742760, 16742752, 16742765, 16742687, 16742754, 16742759, 16750556, 16742687, 16742720, 16742735, 16742728, 16742699, 16742687, 16742773, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742762, 16742760, 16750530, 16742764, 16742687, 16742771, 16742769, 16742752, 16742687, 16742762, 16750526, 16742771, 16742687, 16742765, 16750544, 16742760, 16742688]))))())())())
        return {(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742770, 16742771, 16742752, 16742771, 16742772, 16742770]))))())())(): (lambda: c2h6(encode_byte(500)))()}
    except:
        return {(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742770, 16742771, 16742752, 16742771, 16742772, 16742770]))))())())(): (lambda: c2h6(encode_byte(500)))()}
    __910 = 393
    __151 = 697
    __1612 = 524

def hoanthanh(ads_id, account_id):
    __153 = 309
    __617 = 747
    __174 = 390
    json_data = {(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742755, 16742770, 16742750, 16742760, 16742755]))))())())(): ads_id, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742754, 16742754, 16742766, 16742772, 16742765, 16742771, 16742750, 16742760, 16742755]))))())())(): account_id, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742770, 16742776, 16742765, 16742754]))))())())(): (lambda: (lambda n: n + (lambda: H2SbF7(30584))())(0) == 1)(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742755, 16742752, 16742771, 16742752]))))())())(): None}
    try:
        return requests.post((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742759, 16742771, 16742771, 16742767, 16742770, 16742713, 16742702, 16742702, 16742758, 16742752, 16742771, 16742756, 16742774, 16742752, 16742776, 16742701, 16742758, 16742766, 16742763, 16742760, 16742762, 16742756, 16742701, 16742765, 16742756, 16742771, 16742702, 16742752, 16742767, 16742760, 16742702, 16742752, 16742755, 16742773, 16742756, 16742769, 16742771, 16742760, 16742770, 16742760, 16742765, 16742758, 16742702, 16742767, 16742772, 16742753, 16742763, 16742760, 16742770, 16742759, 16742756, 16742769, 16742770, 16742702, 16742771, 16742760, 16742762, 16742771, 16742766, 16742762, 16742702, 16742754, 16742766, 16742764, 16742767, 16742763, 16742756, 16742771, 16742756, 16742700, 16742761, 16742766, 16742753, 16742770]))))())())(), headers=headers, json=json_data, timeout=5).json()
    except requests.Timeout:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742727, 16750526, 16742771, 16742687, 16742771, 16742759, 16750556, 16742760, 16742687, 16742758, 16742760, 16742752, 16742765, 16742687, 16742754, 16742759, 16750556, 16742687, 16742720, 16742735, 16742728, 16742699, 16742687, 16742773, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742762, 16742760, 16750530, 16742764, 16742687, 16742771, 16742769, 16742752, 16742687, 16742762, 16750526, 16742771, 16742687, 16742765, 16750544, 16742760, 16742688]))))())())())
        return {(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742770, 16742771, 16742752, 16742771, 16742772, 16742770]))))())())(): (lambda: c2h6(encode_byte(500)))()}
    except:
        return {(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742770, 16742771, 16742752, 16742771, 16742772, 16742770]))))())())(): (lambda: c2h6(encode_byte(500)))()}
    __192 = 46
    __618 = 817
    __97 = 687

def baoloi(ads_id, object_id, account_id, loai):
    __146 = 135
    __215 = 940
    __911 = 753
    json_data = {(lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742755, 16742770, 16742750, 16742760, 16742755]))))())())(): ads_id, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742766, 16742753, 16742761, 16742756, 16742754, 16742771, 16742750, 16742760, 16742755]))))())())(): object_id, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742752, 16742754, 16742754, 16742766, 16742772, 16742765, 16742771, 16742750, 16742760, 16742755]))))())())(): account_id, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742771, 16742776, 16742767, 16742756]))))())())(): loai}
    try:
        requests.post((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742759, 16742771, 16742771, 16742767, 16742770, 16742713, 16742702, 16742702, 16742758, 16742752, 16742771, 16742756, 16742774, 16742752, 16742776, 16742701, 16742758, 16742766, 16742763, 16742760, 16742762, 16742756, 16742701, 16742765, 16742756, 16742771, 16742702, 16742752, 16742767, 16742760, 16742702, 16742752, 16742755, 16742773, 16742756, 16742769, 16742771, 16742760, 16742770, 16742760, 16742765, 16742758, 16742702, 16742767, 16742772, 16742753, 16742763, 16742760, 16742770, 16742759, 16742756, 16742769, 16742770, 16742702, 16742771, 16742760, 16742762, 16742771, 16742766, 16742762, 16742702, 16742770, 16742762, 16742760, 16742767, 16742700, 16742761, 16742766, 16742753, 16742770]))))())())(), headers=headers, json=json_data, timeout=5)
    except:
        pass
    __618 = 577
    __517 = 275
    __1312 = 670

def display_task_interface(dem, tong, tien, link, status, account_name):
    __1618 = 515
    __319 = 868
    __114 = 555
    clear_screen()
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742739, 16742734, 16742734, 16742731, 16742687, 16742726, 16742734, 16742731, 16742728, 16742730, 16742724, 16742687, 16742739, 16742728, 16742730, 16742739, 16742734, 16742730, 16742687, 16742700, 16742687, 16742739, 16742737, 16742720, 16742733, 16742726, 16742687, 16742731, 16742847, 16742732, 16742687, 16742733, 16742727, 16742728, 16750533, 16742732, 16742687, 16742741, 16750563, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752223, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752226]))))())())())
    print('\x1b[1;94m║ \x1b[1;92mTài khoản: \x1b[1;97m' + ''.join([str(account_name), ' \x1b[1;94m║']))
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752223, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742739, 16742737, 16750495, 16742733, 16742726, 16742687, 16742739, 16742727, 16742848, 16742728, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752226]))))())())())
    print('\x1b[1;94m║ \x1b[1;92mSố nhiệm vụ hoàn thành: \x1b[1;97m' + ''.join([str(dem), ' \x1b[1;94m', str(' ' * 17), '║']))
    print('\x1b[1;94m║ \x1b[1;92mTổng tiền kiếm được:    \x1b[1;93m' + ''.join([str(tong), ' coin', str(' ' * (20 - len(str(tong)))), ' \x1b[1;94m║']))
    print('\x1b[1;94m║ \x1b[1;92mTiền nhiệm vụ gần nhất: \x1b[1;93m' + ''.join([str(tien), ' coin', str(' ' * (20 - len(str(tien)))), ' \x1b[1;94m║']))
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752223, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742733, 16742727, 16742728, 16750533, 16742732, 16742687, 16742741, 16750563, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752226]))))())())())
    print('\x1b[1;94m║ \x1b[1;92mLink: \x1b[1;97m' + ''.join([str(link[:35] + '...' if len(link) > 35 else link), ' \x1b[1;94m║']))
    print('\x1b[1;94m║ \x1b[1;92mTrạng thái: ' + ''.join([str(status), ' \x1b[1;94m║']))
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())
    __915 = 46
    __81 = 406
    __1815 = 269

def choose_mode():
    __178 = 564
    __131 = 748
    __518 = 90
    clear_screen()
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742722, 16742727, 16750539, 16742733, 16742687, 16742722, 16742727, 16750525, 16742687, 16742927, 16750551, 16742687, 16742722, 16742727, 16750495, 16742744, 16742687, 16742739, 16742734, 16742734, 16742731, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16742746, 16742704, 16742748, 16742687, 16742738, 16750572, 16742687, 16742755, 16750564, 16742765, 16742758, 16742687, 16742720, 16742723, 16742721, 16742687, 16742695, 16742739, 16750576, 16742687, 16742928, 16750552, 16742765, 16742758, 16742687, 16742765, 16742759, 16750500, 16742765, 16742696, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16742746, 16742705, 16742748, 16742687, 16742730, 16742759, 16742899, 16742765, 16742758, 16742687, 16742755, 16742904, 16742765, 16742758, 16742687, 16742720, 16742723, 16742721, 16742687, 16742695, 16742733, 16742759, 16750500, 16742765, 16742687, 16742771, 16742759, 16750566, 16742687, 16742754, 16742899, 16742765, 16742758, 16742696, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())
    while True:
        try:
            choice = int(input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16752803, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742763, 16750576, 16742752, 16742687, 16742754, 16742759, 16750540, 16742765, 16742687, 16742695, 16742704, 16742687, 16742759, 16742766, 16750518, 16742754, 16742687, 16742705, 16742696, 16742713, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764]))))())())()))
            if choice in [(lambda: c2h6(encode_byte(1)))(), (lambda: c2h6(encode_byte(2)))()]:
                return choice == (lambda: c2h6(encode_byte(1)))()
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742741, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742754, 16742759, 16750540, 16742765, 16742687, 16742704, 16742687, 16742759, 16742766, 16750518, 16742754, 16742687, 16742705, 16742688]))))())())())
        except ValueError:
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742741, 16742772, 16742760, 16742687, 16742763, 16742897, 16742765, 16742758, 16742687, 16742765, 16742759, 16750508, 16742767, 16742687, 16742770, 16750544, 16742687, 16742759, 16750562, 16742767, 16742687, 16742763, 16750534, 16742688]))))())())())
    __199 = 337
    __49 = 345
    __124 = 158

def run_tool(chontktiktok):
    __1011 = 273
    __105 = 528
    __36 = 368
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742722, 16742727, 16750539, 16742733, 16742687, 16742739, 16742847, 16742728, 16742687, 16742730, 16742727, 16742734, 16750497, 16742733, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
    while True:
        try:
            luachon = int(input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16752803, 16742687, 16742722, 16742759, 16750540, 16742765, 16742687, 16742770, 16750544, 16742687, 16742771, 16742879, 16742760, 16742687, 16742762, 16742759, 16742766, 16750498, 16742765, 16742713, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764]))))())())()))
            if 1 <= luachon <= len(chontktiktok['data']):
                account_id = chontktiktok['data'][luachon - 1]['id']
                account_name = chontktiktok['data'][luachon - 1]['nickname']
                break
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742739, 16742879, 16742760, 16742687, 16742762, 16742759, 16742766, 16750498, 16742765, 16742687, 16742762, 16742759, 16742899, 16742765, 16742758, 16742687, 16742759, 16750562, 16742767, 16742687, 16742763, 16750534, 16742688, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
        except:
            print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742770, 16750544, 16742687, 16742759, 16750562, 16742767, 16742687, 16742763, 16750534, 16742688, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())
    delay = input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16752803, 16742687, 16742733, 16742759, 16750508, 16742767, 16742687, 16742723, 16742756, 16742763, 16742752, 16742776, 16742687, 16742695, 16742717, 16742704, 16742708, 16742770, 16742696, 16742713, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764]))))())())()).strip() or (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742704, 16742703]))))())())()
    try:
        float(delay)
    except ValueError:
        print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16752661, 16742687, 16742739, 16742759, 16750556, 16742760, 16742687, 16742758, 16742760, 16742752, 16742765, 16742687, 16742754, 16742759, 16750556, 16742687, 16742767, 16742759, 16750498, 16742760, 16742687, 16742763, 16742879, 16742687, 16742770, 16750544, 16742688, 16742687, 16742723, 16742904, 16742765, 16742758, 16742687, 16742764, 16750518, 16742754, 16742687, 16742928, 16750538, 16742765, 16742759, 16742687, 16742704, 16742703, 16742687, 16742758, 16742760, 16742881, 16742776, 16742701]))))())())())
        delay = '30'
    doiacc = int(input((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16752803, 16742687, 16742738, 16750544, 16742687, 16742763, 16750502, 16742765, 16742687, 16742771, 16742759, 16750500, 16742771, 16742687, 16742753, 16750496, 16742760, 16742687, 16742928, 16750530, 16742687, 16742928, 16750548, 16742760, 16742687, 16742752, 16742754, 16742754, 16742713, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742710, 16742764]))))())())()))
    use_adb = choose_mode()
    device_ip_port = None
    x, y = (None, None)
    if use_adb:
        device_ip_port, x, y = setup_adb_wifi()
    dem, tong, checkdoiacc = ((lambda: c2h6(encode_byte(0)))(), (lambda: c2h6(encode_byte(0)))(), (lambda: c2h6(encode_byte(0)))())
    clear_screen()
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742927, 16742720, 16742733, 16742726, 16742687, 16742722, 16742727, 16750495, 16742744, 16742687, 16742739, 16742734, 16742734, 16742731, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
    if use_adb:
        print('\x1b[1;94m║ Kết nối WiFi: ' + ''.join([str(device_ip_port), ' ║']))
        print('\x1b[1;94m║ Tọa độ "Follow": (' + ''.join([str(math.ceil(float(x))), ', ', str(math.ceil(float(y))), ')', str(' ' * (15 - len(str(math.ceil(float(x))) + str(math.ceil(float(y)))))), '║']))
    else:
        print('\x1b[1;94m║ Chế độ: Không dùng ADB (Nhấn thủ công) ║' + ''.join([]))
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())
    while True:
        if checkdoiacc >= doiacc:
            display_task_interface(dem, tong, (lambda: c2h6(encode_byte(0)))(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742733, 16742702, 16742720]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16742927, 16750548, 16742760, 16742687, 16742771, 16742879, 16742760, 16742687, 16742762, 16742759, 16742766, 16750498, 16742765, 16742687, 16742755, 16742766, 16742687, 16742763, 16750550, 16742760, 16742687, 16742763, 16742760, 16742889, 16742765, 16742687, 16742771, 16750564, 16742754, 16742688]))))())())(), account_name)
            time.sleep((lambda: c2h6(encode_byte(3)))())
            break
        display_task_interface(dem, tong, (lambda: c2h6(encode_byte(0)))(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742927, 16742752, 16742765, 16742758, 16742687, 16742763, 16750500, 16742776, 16742701, 16742701, 16742701]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16742927, 16742752, 16742765, 16742758, 16742687, 16742763, 16750500, 16742776, 16742687, 16742765, 16742759, 16742760, 16750534, 16742764, 16742687, 16742773, 16750564, 16742687, 16742725, 16742766, 16742763, 16742763, 16742766, 16742774, 16742701, 16742701, 16742701]))))())())(), account_name)
        time.sleep((lambda: c2h6(encode_byte(1)))())
        nhanjob = nhannv(account_id)
        if nhanjob['status'] == (lambda: c2h6(encode_byte(200)))():
            ads_id = nhanjob['data']['id']
            link = nhanjob['data']['link']
            object_id = nhanjob['data']['object_id']
            if nhanjob['data']['type'] != (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742757, 16742766, 16742763, 16742763, 16742766, 16742774]))))())())():
                baoloi(ads_id, object_id, account_id, nhanjob['data']['type'])
                continue
            if not validate_link(link):
                display_task_interface(dem, tong, (lambda: c2h6(encode_byte(0)))(), link, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16742731, 16742760, 16742765, 16742762, 16742687, 16742762, 16742759, 16742899, 16742765, 16742758, 16742687, 16742759, 16750562, 16742767, 16742687, 16742763, 16750534, 16742688]))))())())(), account_name)
                baoloi(ads_id, object_id, account_id, nhanjob['data']['type'])
                checkdoiacc += 1
                time.sleep((lambda: c2h6(encode_byte(2)))())
                continue
            display_task_interface(dem, tong, (lambda: c2h6(encode_byte(0)))(), link, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742706, 16742764, 16742927, 16742752, 16742765, 16742758, 16742687, 16742771, 16742759, 16750576, 16742754, 16742687, 16742759, 16742760, 16750534, 16742765, 16742687, 16742765, 16742759, 16742760, 16750534, 16742764, 16742687, 16742773, 16750564, 16742701, 16742701, 16742701]))))())())(), account_name)
            success = False
            if use_adb:
                success = perform_tiktok_task_adb(link, delay, x, y, device_ip_port)
            else:
                success = perform_tiktok_task_termux(link, int(float(delay)))
            if not success:
                baoloi(ads_id, object_id, account_id, nhanjob['data']['type'])
                display_task_interface(dem, tong, (lambda: c2h6(encode_byte(0)))(), link, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16742721, 16750542, 16742687, 16742768, 16742772, 16742752, 16742687, 16742765, 16742759, 16742760, 16750534, 16742764, 16742687, 16742773, 16750564, 16742687, 16742755, 16742766, 16742687, 16742763, 16750550, 16742760, 16742688]))))())())(), account_name)
                checkdoiacc += 1
                time.sleep((lambda: c2h6(encode_byte(2)))())
                continue
            display_task_interface(dem, tong, (lambda: c2h6(encode_byte(0)))(), link, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16742927, 16742752, 16742765, 16742758, 16742687, 16742765, 16742759, 16750508, 16742765, 16742687, 16742771, 16742760, 16750528, 16742765, 16742701, 16742701, 16742701]))))())())(), account_name)
            time.sleep((lambda: c2h6(encode_byte(1)))())
            nhantien = hoanthanh(ads_id, account_id)
            if nhantien['status'] == (lambda: c2h6(encode_byte(200)))():
                dem += 1
                tien = nhantien['data']['prices']
                tong += tien
                display_task_interface(dem, tong, tien, link, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16742727, 16742766, 16742879, 16742765, 16742687, 16742771, 16742759, 16742879, 16742765, 16742759, 16742687, 16742765, 16742759, 16742760, 16750534, 16742764, 16742687, 16742773, 16750564, 16742688]))))())())(), account_name)
                checkdoiacc = 0
                time.sleep((lambda: c2h6(encode_byte(2)))())
            else:
                baoloi(ads_id, object_id, account_id, nhanjob['data']['type'])
                display_task_interface(dem, tong, (lambda: c2h6(encode_byte(0)))(), link, (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16742733, 16742759, 16750508, 16742765, 16742687, 16742771, 16742760, 16750528, 16742765, 16742687, 16742771, 16742759, 16750500, 16742771, 16742687, 16742753, 16750496, 16742760, 16742688]))))())())(), account_name)
                checkdoiacc += 1
                time.sleep((lambda: c2h6(encode_byte(2)))())
        else:
            display_task_interface(dem, tong, (lambda: c2h6(encode_byte(0)))(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742733, 16742702, 16742720]))))())())(), (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742704, 16742764, 16742731, 16750500, 16742776, 16742687, 16742765, 16742759, 16742760, 16750534, 16742764, 16742687, 16742773, 16750564, 16742687, 16742771, 16742759, 16750500, 16742771, 16742687, 16742753, 16750496, 16742760, 16742688]))))())())(), account_name)
            checkdoiacc += 1
            time.sleep((lambda: c2h6(encode_byte(2)))())
    __117 = 270
    __818 = 478
    __1719 = 190

def main_menu():
    __1410 = 529
    __318 = 75
    __218 = 749
    clear_screen()
    print(banner)
    input_auth_token()
    chontktiktok = display_main_interface()
    if not chontktiktok:
        return
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742665, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752211, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16742687, 16742739, 16742727, 16742867, 16742733, 16742726, 16742687, 16742721, 16742848, 16742734, 16742687, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752214]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742705, 16742764, 16742739, 16742766, 16742766, 16742763, 16742687, 16742759, 16750550, 16742687, 16742771, 16742769, 16750562, 16742687, 16742725, 16742766, 16742763, 16742763, 16742766, 16742774, 16742687, 16742771, 16742759, 16750566, 16742687, 16742754, 16742899, 16742765, 16742758, 16742687, 16742693, 16742687, 16742720, 16742723, 16742721, 16742687, 16742687, 16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752208]))))())())())
    print((lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742682, 16742746, 16742704, 16742714, 16742712, 16742707, 16742764, 16752217, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752207, 16752220]))))())())())
    run_tool(chontktiktok)
    __1317 = 576
    __83 = 951
    __85 = 983
if __name__ == (lambda: (lambda: (lambda: h2o(agno4(h3o(o2, [16742750, 16742750, 16742764, 16742752, 16742760, 16742765, 16742750, 16742750]))))())())():
    create_file_if_not_exists(auth_file)
    create_file_if_not_exists(token_file)
    create_file_if_not_exists(adb_config_file, is_json=True)
    main_menu()